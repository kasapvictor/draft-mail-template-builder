{
  "version": 3,
  "sources": ["../../effector/effector/collection.ts", "../../effector/effector/throw.ts", "../../effector/effector/region.ts", "../../effector/effector/createNode.ts", "../../effector/effector/tag.ts", "../../effector/effector/kernel.ts", "../../effector/effector/naming.ts", "../../effector/effector/config.ts", "../../effector/effector/template.ts", "../../effector/effector/createUnit.ts", "../../effector/effector/combine.ts", "../../effector/effector/defer.ts", "../../effector/effector/createEffect.ts", "../../effector/effector/attach.ts", "../../effector/effector/createApi.ts", "../../effector/effector/createDomain.ts", "../../effector/effector/fromObservable.ts", "../../effector/effector/merge.ts", "../../effector/effector/sample.ts", "../../effector/effector/guard.ts", "../../effector/effector/restore.ts", "../../effector/effector/split.ts", "../../effector/effector/fork/allSettled.ts", "../../effector/effector/fork/util.ts", "../../effector/effector/fork/fork.ts", "../../effector/effector/fork/createScope.ts", "../../effector/effector/fork/hydrate.ts", "../../effector/effector/fork/scopeBind.ts", "../../effector/effector/fork/serialize.ts", "../../effector/effector/createWatch.ts", "../../effector/effector/observable.ts", "../../effector/effector/getter.ts", "../../effector/effector/validate.ts", "../../effector/effector/id.ts", "../../effector/effector/own.ts", "../../effector/effector/is.ts", "../../effector/effector/caller.ts", "../../effector/effector/step.ts", "../../effector/effector/stateRef.ts", "../../effector/effector/clearNode.ts", "../../effector/effector/subscription.ts", "../../effector/effector/forward.ts", "../../effector/effector/watch.ts"],
  "sourcesContent": ["export function forIn<T, Key extends string = string>(\n  obj: Record<Key, T>,\n  cb: (value: T, key: Key) => void,\n) {\n  for (const key in obj) {\n    cb(obj[key], key)\n  }\n}\n\nexport const includes = <T>(list: T[], item: T) => list.includes(item)\n\nexport const removeItem = <T>(list: T[], item: T) => {\n  const pos = list.indexOf(item)\n  if (pos !== -1) {\n    list.splice(pos, 1)\n  }\n}\n\nexport const add = <T>(list: T[], item: T) => list.push(item)\n\nexport function forEach<T>(\n  list: T[],\n  fn: (item: T, index: number, list: T[]) => void,\n): void\nexport function forEach<K, T>(\n  list: Map<K, T>,\n  fn: (item: T, key: K) => void,\n): void\nexport function forEach<T>(list: Set<T>, fn: (item: T) => void): void\nexport function forEach(list: any, fn: Function) {\n  list.forEach(fn)\n}\n", "export function assert(condition: unknown, message: string): asserts condition {\n  if (!condition) throw Error(message)\n}\n\nexport const deprecate = (\n  condition: unknown,\n  subject: string,\n  suggestion?: string,\n) =>\n  !condition &&\n  console.error(\n    `${subject} is deprecated${\n      suggestion ? `, use ${suggestion} instead` : ''\n    }`,\n  )\n", "import type {Template} from '../forest/index.h'\nimport type {NodeUnit} from './index.h'\nimport {getParent, getMeta} from './getter'\nimport {createNode} from './createNode'\n\ntype RegionStack = {\n  parent: RegionStack | null\n  value: any\n  template: Template | null\n  sidRoot?: string\n}\n\nexport let regionStack: RegionStack | null = null\n\nexport const readTemplate = (): Template | null =>\n  regionStack && regionStack.template\nexport const readSidRoot = (sid?: string | null) => {\n  if (sid && regionStack && regionStack.sidRoot)\n    sid = `${regionStack.sidRoot}|${sid}`\n  return sid\n}\n\nexport function withRegion(unit: NodeUnit, cb: () => void) {\n  regionStack = {\n    parent: regionStack,\n    value: unit,\n    template: getMeta(unit, 'template') || readTemplate(),\n    sidRoot: getMeta(unit, 'sidRoot') || (regionStack && regionStack.sidRoot),\n  }\n  try {\n    return cb()\n  } finally {\n    regionStack = getParent(regionStack)\n  }\n}\n\nexport const withFactory = ({\n  sid,\n  name,\n  loc,\n  method,\n  fn,\n}: {\n  sid: string\n  name?: string\n  loc?: any\n  method?: string\n  fn: () => any\n}) => {\n  const sidNode = createNode({\n    meta: {sidRoot: readSidRoot(sid), name, loc, method},\n  })\n  return withRegion(sidNode, fn)\n}\n", "import type {Node, NodeUnit, Cmd} from './index.h'\nimport {getGraph, getOwners, getLinks, getValue} from './getter'\nimport {nextNodeID} from './id'\nimport {CROSSLINK} from './tag'\nimport {regionStack} from './region'\nimport {own} from './own'\nimport {add, forEach} from './collection'\n\nexport const arrifyNodes = (\n  list: NodeUnit | Array<NodeUnit | NodeUnit[]> = [],\n): Node[] => (Array.isArray(list) ? list : [list]).flat().map(getGraph)\n\nexport function createNode({\n  node = [],\n  from,\n  source,\n  parent = from || source,\n  to,\n  target,\n  child = to || target,\n  scope = {},\n  meta = {},\n  family: familyRaw = {type: 'regular'},\n  regional,\n}: {\n  node?: Array<Cmd | false | void | null>\n  from?: NodeUnit | NodeUnit[]\n  source?: NodeUnit | NodeUnit[]\n  parent?: NodeUnit | NodeUnit[]\n  to?: NodeUnit | NodeUnit[]\n  target?: NodeUnit | NodeUnit[]\n  child?: NodeUnit | NodeUnit[]\n  scope?: {[name: string]: any}\n  meta?: {[name: string]: any}\n  family?: {\n    type?: 'regular' | 'crosslink' | 'domain'\n    links?: NodeUnit | NodeUnit[]\n    owners?: NodeUnit | Array<NodeUnit | NodeUnit[]>\n  }\n  regional?: boolean\n} = {}): Node {\n  const sources = arrifyNodes(parent)\n  const links = arrifyNodes(familyRaw.links)\n  const owners = arrifyNodes(familyRaw.owners)\n  const seq: Cmd[] = []\n  forEach(node, item => item && add(seq, item))\n  const result: Node = {\n    id: nextNodeID(),\n    seq,\n    next: arrifyNodes(child),\n    meta,\n    scope,\n    family: {\n      type: familyRaw.type || CROSSLINK,\n      links,\n      owners,\n    },\n  }\n  forEach(links, link => add(getOwners(link), result))\n  forEach(owners, owner => add(getLinks(owner), result))\n  forEach(sources, source => add(source.next, result))\n  if (regional && regionStack) {\n    own(getValue(regionStack), [result])\n  }\n  return result\n}\n", "export const STORE = 'store'\nexport const EVENT = 'event'\nexport const EFFECT = 'effect'\nexport const DOMAIN = 'domain'\nexport const SCOPE = 'scope'\nexport const SAMPLER = 'sampler'\nexport const CROSSLINK = 'crosslink'\nexport const MAP = 'map'\nexport const STACK = 'stack'\nexport const BARRIER = 'barrier'\nexport const VALUE = 'value'\nexport const SAMPLE = 'sample'\nexport const FILTER = 'filter'\nexport const REG_A = 'a'\n", "import type {Leaf} from '../forest/index.h'\n\nimport type {Node, NodeUnit, StateRef, Stack} from './index.h'\nimport {readRef} from './stateRef'\nimport {getForkPage, getGraph, getMeta, getParent, getValue} from './getter'\nimport {STORE, EFFECT, SAMPLER, STACK, BARRIER, VALUE, REG_A, MAP} from './tag'\nimport type {Scope} from './unit.h'\nimport {add, forEach} from './collection'\n\n/** Names of priority groups */\ntype PriorityTag = 'child' | 'pure' | 'read' | 'barrier' | 'sampler' | 'effect'\n\nexport type BarrierPriorityTag = 'read' | 'barrier' | 'sampler' | 'effect'\n\n/**\n * Position in the current branch,\n * including call stack, priority type\n * and index of next step in the executed Node\n */\ntype Layer = {\n  idx: number\n  stack: Stack\n  type: PriorityTag\n  id: number\n}\n\n/** Queue as linked list or skew heap */\ntype QueueItem = {\n  /** node value */\n  v: Layer\n  /** left node. always null in queue but used in skew heap */\n  l: QueueItem | null\n  /** right node */\n  r: QueueItem | null\n}\ntype QueueBucket = {\n  first: QueueItem | null\n  last: QueueItem | null\n  size: number\n}\n\n/** Dedicated local metadata */\ntype Local = {\n  fail: boolean\n  scope: {[key: string]: any}\n}\n\nlet heap: QueueItem | null = null\n\nconst merge = (a: QueueItem | null, b: QueueItem | null): QueueItem | null => {\n  if (!a) return b\n  if (!b) return a\n\n  let ret\n  if (\n    /**\n     * if both nodes has the same PriorityType\n     * and first node is created after second one\n     */\n    (a.v.type === b.v.type && a.v.id > b.v.id) ||\n    /**\n     * greater priority mean bucket of first node is executed later\n     * e.g  a: \"sampler\", b: \"barrier\"\n     */\n    getPriority(a.v.type) > getPriority(b.v.type)\n  ) {\n    ret = a\n    a = b\n    b = ret\n  }\n  ret = merge(a.r, b)\n  a.r = a.l\n  a.l = ret\n\n  return a\n}\n\n/** queue buckets for each PriorityType */\nconst queue: QueueBucket[] = []\nlet ix = 0\nwhile (ix < 6) {\n  /**\n   * although \"sampler\" and \"barrier\" are using heap instead of linked list,\n   * their buckets are still useful: they maintains size of heap queue\n   */\n  add(queue, {first: null, last: null, size: 0})\n  ix += 1\n}\n\nconst deleteMin = () => {\n  for (let i = 0; i < 6; i++) {\n    const list = queue[i]\n    if (list.size > 0) {\n      /**\n       * bucket 3 is for \"barrier\" PriorityType (used in combine)\n       * bucket 4 is for \"sampler\" PriorityType (used in sample and guard)\n       */\n      if (i === 3 || i === 4) {\n        list.size -= 1\n        const value = heap!.v\n        heap = merge(heap!.l, heap!.r)\n        return value\n      }\n      if (list.size === 1) {\n        list.last = null\n      }\n      const item = list.first\n      list.first = item!.r\n      list.size -= 1\n      return item!.v\n    }\n  }\n}\nconst pushFirstHeapItem = (\n  type: PriorityTag,\n  page: Leaf | null,\n  node: Node,\n  parent: Stack | null,\n  value: any,\n  scope?: Scope | null | void,\n  meta?: Record<string, any> | void,\n) =>\n  pushHeap(\n    0,\n    {\n      a: null,\n      b: null,\n      node,\n      parent,\n      value,\n      page,\n      scope,\n      meta,\n    },\n    type,\n  )\nconst pushHeap = (\n  idx: number,\n  stack: Stack,\n  type: PriorityTag,\n  id: number = 0,\n) => {\n  const priority = getPriority(type)\n  const bucket: QueueBucket = queue[priority]\n  const item: QueueItem = {\n    v: {\n      idx,\n      stack,\n      type,\n      id,\n    },\n    l: null,\n    r: null,\n  }\n  /**\n   * bucket 3 is for \"barrier\" PriorityType (used in combine)\n   * bucket 4 is for \"sampler\" PriorityType (used in sample and guard)\n   */\n  if (priority === 3 || priority === 4) {\n    heap = merge(heap, item)\n  } else {\n    if (bucket.size === 0) {\n      bucket.first = item\n    } else {\n      bucket.last!.r = item\n    }\n    bucket.last = item\n  }\n  bucket.size += 1\n}\n\nconst getPriority = (t: PriorityTag) => {\n  switch (t) {\n    case 'child':\n      return 0\n    case 'pure':\n      return 1\n    case 'read':\n      return 2\n    case BARRIER:\n      return 3\n    case SAMPLER:\n      return 4\n    case EFFECT:\n      return 5\n    default:\n      return -1\n  }\n}\n\nconst barriers = new Set<string | number>()\n\nlet isRoot = true\nexport let isWatch = false\nexport let isPure = false\nexport let currentPage: Leaf | null = null\nexport let forkPage: Scope | void | null\nexport const setForkPage = (newForkPage: Scope | void | null) => {\n  forkPage = newForkPage\n}\nexport const setCurrentPage = (newPage: Leaf | null) => {\n  currentPage = newPage\n}\n\nconst getPageForRef = (page: Leaf | null, id: string) => {\n  if (page) {\n    while (page && !page.reg[id]) {\n      page = getParent(page)\n    }\n    if (page) return page\n  }\n  return null\n}\nexport const getPageRef = (\n  page: Leaf | null,\n  forkPage: Scope | null | void,\n  node: Node | null,\n  ref: StateRef,\n  isGetState?: boolean,\n) => {\n  const pageForRef = getPageForRef(page, ref.id)\n  if (pageForRef) return pageForRef.reg[ref.id]\n  if (forkPage) {\n    initRefInScope(forkPage!, ref, isGetState)\n    return forkPage.reg[ref.id]\n  }\n  return ref\n}\n\nexport function launch(config: {\n  target: NodeUnit | NodeUnit[]\n  params?: any\n  defer?: boolean\n  page?: Leaf | void | null\n  scope?: Scope | void | null\n  stack?: Stack | void\n  meta?: Record<string, any> | void\n}): void\nexport function launch(unit: NodeUnit, payload?: any, upsert?: boolean): void\nexport function launch(unit: any, payload?: any, upsert?: boolean) {\n  let pageForLaunch = currentPage\n  let stackForLaunch = null\n  let forkPageForLaunch = forkPage\n  let meta: Record<string, any> | void\n  if (unit.target) {\n    payload = unit.params\n    upsert = unit.defer\n    meta = unit.meta\n    pageForLaunch = 'page' in unit ? unit.page : pageForLaunch\n    if (unit[STACK]) stackForLaunch = unit[STACK]\n    forkPageForLaunch = getForkPage(unit) || forkPageForLaunch\n    unit = unit.target\n  }\n  if (forkPageForLaunch && forkPage && forkPageForLaunch !== forkPage) {\n    forkPage = null\n  }\n  if (Array.isArray(unit)) {\n    for (let i = 0; i < unit.length; i++) {\n      pushFirstHeapItem(\n        'pure',\n        pageForLaunch,\n        getGraph(unit[i]),\n        stackForLaunch,\n        payload[i],\n        forkPageForLaunch,\n        meta,\n      )\n    }\n  } else {\n    pushFirstHeapItem(\n      'pure',\n      pageForLaunch,\n      getGraph(unit),\n      stackForLaunch,\n      payload,\n      forkPageForLaunch,\n      meta,\n    )\n  }\n  if (upsert && !isRoot) return\n  /** main execution code */\n  const lastStartedState = {\n    isRoot,\n    currentPage,\n    scope: forkPage,\n    isWatch,\n    isPure,\n  }\n  isRoot = false\n  let stop: boolean\n  let skip: boolean\n  let node: Node\n  let value: Layer | undefined\n  let page: Leaf | null\n  let reg: Record<string, StateRef> | void\n  kernelLoop: while ((value = deleteMin())) {\n    const {idx, stack, type} = value\n    node = stack.node\n    currentPage = page = stack.page\n    forkPage = getForkPage(stack)\n    if (page) reg = page.reg\n    else if (forkPage) reg = forkPage.reg\n    // reg = (page ? page : forkPage ? forkPage : node).reg\n    const hasPageReg = !!page\n    const hasScopeReg = !!forkPage\n    const local: Local = {\n      fail: false,\n      scope: node.scope,\n    }\n    stop = skip = false\n    for (let stepn = idx; stepn < node.seq.length && !stop; stepn++) {\n      const step = node.seq[stepn]\n      if (step.order) {\n        const {priority, barrierID} = step.order\n        const id = barrierID\n          ? page\n            ? `${page.fullID}_${barrierID}`\n            : barrierID\n          : 0\n        if (stepn !== idx || type !== priority) {\n          if (barrierID) {\n            if (!barriers.has(id)) {\n              barriers.add(id)\n              pushHeap(stepn, stack, priority, barrierID)\n            }\n          } else {\n            pushHeap(stepn, stack, priority)\n          }\n          continue kernelLoop\n        }\n        barrierID && barriers.delete(id)\n      }\n      switch (step.type) {\n        case 'mov': {\n          const data = step.data\n          let value\n          //prettier-ignore\n          switch (data.from) {\n            case STACK: value = getValue(stack); break\n            case REG_A: /** fall-through case */\n            case 'b':\n              value = stack[data.from]\n              break\n            case VALUE: value = data.store; break\n            case STORE:\n              if (reg && !reg[data.store.id]) {\n                // if (!page.parent) {\n                if (hasPageReg) {\n                  const pageForRef = getPageForRef(page, data.store.id)\n                  stack.page = page = pageForRef\n                  if (pageForRef) {\n                    reg = pageForRef.reg\n                  } else if (hasScopeReg) {\n                    initRefInScope(forkPage!, data.store, false, true, data.softRead)\n                    reg = forkPage!.reg\n                  } else {\n                    reg = undefined //node.reg\n                  }\n                } else if (hasScopeReg) {\n                  /** StateRef in Scope.reg created only when needed */\n                  initRefInScope(forkPage!, data.store, false, true, data.softRead)\n                } else {\n                  // console.error('should not happen')\n                  /** StateRef should exists at least in Node itself, but it is not found */\n                }\n                // }\n              }\n              // value = getPageRef(page, forkPage, node, data.store.id).current\n              value = readRef(reg ? reg[data.store.id] || data.store : data.store)\n              break\n          }\n          //prettier-ignore\n          switch (data.to) {\n            case STACK: stack.value = value; break\n            case REG_A: /** fall-through case */\n            case 'b':\n              stack[data.to] = value\n              break\n            case STORE:\n              getPageRef(page, forkPage, node, data.target).current = value\n              break\n          }\n          break\n        }\n        case 'compute':\n          const data = step.data\n          if (data.fn) {\n            isWatch = getMeta(node, 'op') === 'watch'\n            isPure = data.pure\n            const computationResult = data.safe\n              ? (0 as any, data.fn)(getValue(stack), local.scope, stack)\n              : tryRun(local, data.fn, stack)\n            if (data.filter) {\n              /**\n               * handled edge case: if step.fn will throw,\n               * tryRun will return null\n               * thereby forcing that branch to stop\n               */\n              skip = !computationResult\n            } else {\n              stack.value = computationResult\n            }\n            isWatch = lastStartedState.isWatch\n            isPure = lastStartedState.isPure\n          }\n          break\n      }\n      stop = local.fail || skip\n    }\n    if (!stop) {\n      const finalValue = getValue(stack)\n      const forkPage = getForkPage(stack)\n      forEach(node.next, nextNode => {\n        pushFirstHeapItem('child', page, nextNode, stack, finalValue, forkPage)\n      })\n      if (forkPage) {\n        if (getMeta(node, 'needFxCounter'))\n          pushFirstHeapItem(\n            'child',\n            page,\n            forkPage.fxCount,\n            stack,\n            finalValue,\n            forkPage,\n          )\n        if (getMeta(node, 'storeChange'))\n          pushFirstHeapItem(\n            'child',\n            page,\n            forkPage.storeChange,\n            stack,\n            finalValue,\n            forkPage,\n          )\n        if (getMeta(node, 'warnSerialize'))\n          pushFirstHeapItem(\n            'child',\n            page,\n            forkPage.warnSerializeNode,\n            stack,\n            finalValue,\n            forkPage,\n          )\n        const additionalLinks = forkPage.additionalLinks[node.id]\n        if (additionalLinks) {\n          forEach(additionalLinks, nextNode => {\n            pushFirstHeapItem(\n              'child',\n              page,\n              nextNode,\n              stack,\n              finalValue,\n              forkPage,\n            )\n          })\n        }\n      }\n    }\n  }\n  isRoot = lastStartedState.isRoot\n  currentPage = lastStartedState.currentPage\n  forkPage = getForkPage(lastStartedState)\n}\n\nconst noopParser = (x: any) => x\n\nexport const initRefInScope = (\n  scope: {\n    reg: Record<string, StateRef>\n    sidValuesMap: Record<string, any>\n    sidIdMap: Record<string, string>\n    fromSerialize?: boolean\n  },\n  sourceRef: StateRef,\n  isGetState?: boolean,\n  isKernelCall?: boolean,\n  softRead?: boolean,\n) => {\n  const refsMap = scope.reg\n  const sid = sourceRef.sid\n  const serialize = sourceRef?.meta?.serialize\n  const parser =\n    scope.fromSerialize && serialize !== 'ignore'\n      ? serialize?.read || noopParser\n      : noopParser\n  if (refsMap[sourceRef.id]) return\n  const ref: StateRef = {\n    id: sourceRef.id,\n    current: sourceRef.current,\n    meta: sourceRef.meta,\n  }\n\n  if (sid && sid in scope.sidValuesMap && !(sid in scope.sidIdMap)) {\n    ref.current = parser(scope.sidValuesMap[sid])\n  } else {\n    if (sourceRef.before && !softRead) {\n      let isFresh = false\n      const needToAssign = isGetState || !sourceRef.noInit || isKernelCall\n      forEach(sourceRef.before, cmd => {\n        switch (cmd.type) {\n          case MAP: {\n            const from = cmd.from\n            if (from || cmd.fn) {\n              if (from) initRefInScope(scope, from, isGetState, isKernelCall)\n              const value = from && refsMap[from.id].current\n              if (needToAssign) {\n                ref.current = cmd.fn ? cmd.fn(value) : value\n              }\n            }\n            break\n          }\n          case 'field': {\n            if (!isFresh) {\n              isFresh = true\n              if (Array.isArray(ref.current)) {\n                ref.current = [...ref.current]\n              } else {\n                ref.current = {...ref.current}\n              }\n            }\n            initRefInScope(scope, cmd.from, isGetState, isKernelCall)\n            if (needToAssign) {\n              const from = refsMap[cmd.from.id]\n              ref.current[cmd.field] = refsMap[from.id].current\n            }\n            break\n          }\n          // case 'closure':\n          //   break\n        }\n      })\n    }\n  }\n  if (sid) scope.sidIdMap[sid] = sourceRef.id\n  refsMap[sourceRef.id] = ref\n}\n\n/** try catch for external functions */\nconst tryRun = (local: Local, fn: Function, stack: Stack) => {\n  try {\n    return fn(getValue(stack), local.scope, stack)\n  } catch (err) {\n    console.error(err)\n    local.fail = true\n  }\n}\n", "import type {Store, CommonUnit, Domain} from './unit.h'\nimport {is} from './is'\nimport {getParent, getCompositeName} from './getter'\nimport {forIn} from './collection'\n\nexport function unitObjectName(objOrArr: any, method: string = 'combine') {\n  let name = method + '('\n  let comma = ''\n  let i = 0\n  forIn(objOrArr, unit => {\n    /* inlined max object names constant */\n    if (i < 25) {\n      if (unit != null) {\n        name += comma\n        name += is.unit(unit)\n          ? getCompositeName(unit as CommonUnit | Domain).fullName\n          : (unit as any).toString()\n      }\n      i += 1\n      comma = ', '\n    }\n  })\n  return name + ')'\n}\n\nexport function setStoreName<State>(store: Store<State>, rawName: string) {\n  store.shortName = rawName\n  Object.assign(getCompositeName(store), createName(rawName, getParent(store)))\n}\n\nexport type CompositeName = {\n  shortName: string\n  fullName: string\n  path: string[]\n}\n\nexport function createName(name: string, parent?: Domain): CompositeName {\n  let path: string[]\n  let fullName\n  const shortName = name\n  if (!parent) {\n    path = name.length === 0 ? [] : [name]\n    fullName = name\n  } else {\n    const composite = getCompositeName(parent)\n    if (name.length === 0) {\n      path = composite.path\n      fullName = composite.fullName\n    } else {\n      path = composite.path.concat([name])\n      fullName =\n        composite.fullName.length === 0\n          ? name\n          : '' + composite.fullName + '/' + name\n    }\n  }\n  return {shortName, fullName, path}\n}\n", "import {forIn} from './collection'\nimport {assertObject, isObject, isVoid} from './is'\n\nexport function processArgsToConfig(\n  arg: any,\n  singleArgument: true,\n): [any, any | void]\nexport function processArgsToConfig(args: any[]): [any[], any | void]\nexport function processArgsToConfig(\n  args: any[],\n  singleArgument?: boolean,\n): [any[], any | void] {\n  const rawConfig = singleArgument ? args : args[0]\n  assertObject(rawConfig)\n  let metadata = rawConfig.or\n  const childConfig = rawConfig.and\n  if (childConfig) {\n    const unwrappedNestedValue = singleArgument ? childConfig : childConfig[0]\n    /**\n     * if there is no \"and\" field then we reached the leaf of the tree\n     * and this is an original user-defined argument\n     *\n     * note that in this case we're returning all arguments, not the only one been unwrapped\n     **/\n    if (!isObject(unwrappedNestedValue) || !('and' in unwrappedNestedValue)) {\n      args = childConfig\n    } else {\n      //@ts-expect-error\n      const nested = processArgsToConfig(childConfig, singleArgument)\n\n      args = nested[0]\n      metadata = {...metadata, ...nested[1]}\n    }\n  }\n  return [args, metadata]\n}\n\n/**\nprocessed fields:\n\n'name',\n'sid',\n'loc',\n'handler',\n'updateFilter',\n'parent',\n'serialize',\n'named',\n'derived',\n*/\nexport const flattenConfig = (part: any, config: Record<string, any> = {}) => {\n  if (isObject(part)) {\n    flattenConfig(part.or, config)\n    forIn(part, (value, field) => {\n      if (!isVoid(value) && field !== 'or' && field !== 'and') {\n        config[field] = value\n      }\n    })\n    flattenConfig(part.and, config)\n  }\n  return config\n}\n", "import {readTemplate} from './region'\nimport type {Template, TemplateHandlers} from '../forest/index.h'\n\nexport function applyTemplate<K extends keyof TemplateHandlers>(\n  method: K,\n  ...args: Parameters<TemplateHandlers[K]> extends [Template, ...infer Args]\n    ? Args\n    : never\n): ReturnType<TemplateHandlers[K]> | void {\n  const template = readTemplate()\n  if (template) {\n    const fn = template.handlers[method]\n    // @ts-expect-error\n    if (fn) return fn(template, ...args)\n  }\n}\n", "import type {Template} from '../forest/index.h'\nimport type {Store, Event, CommonUnit, Effect, Domain} from './unit.h'\nimport type {Subscriber, Config, Cmd, Kind} from './index.h'\n\nimport {observableSymbol} from './observable'\n\nimport {\n  is,\n  isObject,\n  isFunction,\n  assertObject,\n  assertNodeSet,\n  isVoid,\n} from './is'\nimport {calc, mov, read, userFnCall} from './step'\nimport {createStateRef, readRef, addRefOp} from './stateRef'\nimport {nextUnitID} from './id'\nimport {callStackAReg, callARegStack, callStack} from './caller'\nimport {own} from './own'\nimport {createNode} from './createNode'\nimport {\n  launch,\n  currentPage,\n  forkPage,\n  setCurrentPage,\n  initRefInScope,\n  isPure,\n} from './kernel'\n\nimport {createName} from './naming'\nimport {createLinkNode} from './forward'\nimport {watchUnit} from './watch'\nimport {createSubscription} from './subscription'\nimport {readTemplate, readSidRoot} from './region'\nimport {\n  getSubscribers,\n  getStoreState,\n  getGraph,\n  getParent,\n  setMeta,\n  getMeta,\n} from './getter'\nimport {assert, deprecate} from './throw'\nimport {DOMAIN, STORE, EVENT, MAP, FILTER, STACK, REG_A} from './tag'\nimport {applyTemplate} from './template'\nimport {forEach} from './collection'\nimport {flattenConfig} from './config'\n\nexport const applyParentHook = (\n  source: CommonUnit,\n  target: CommonUnit,\n  hookType: 'event' | 'effect' = EVENT,\n) => {\n  if (getParent(source)) getParent(source).hooks[hookType](target)\n}\n\nexport const initUnit = (kind: Kind, unit: any, rawConfig: any) => {\n  const config = flattenConfig(rawConfig)\n  const isDomain = kind === DOMAIN\n  const id = nextUnitID()\n  const {sid = null, named = null, domain = null, parent = domain} = config\n  const name = named ? named : config.name || (isDomain ? '' : id)\n  const compositeName = createName(name, parent)\n  const meta: Record<string, any> = {\n    op: (unit.kind = kind),\n    name: (unit.shortName = name),\n    sid: (unit.sid = readSidRoot(sid)),\n    named,\n    unitId: (unit.id = id),\n    serialize: config.serialize,\n    derived: config.derived,\n    config,\n  }\n  unit.parent = parent\n  unit.compositeName = compositeName\n  unit.defaultConfig = config\n  unit.thru = (fn: Function) => {\n    deprecate(false, 'thru', 'js pipe')\n    return fn(unit)\n  }\n  unit.getType = () => compositeName.fullName\n  if (!isDomain) {\n    unit.subscribe = (observer: Subscriber<any>) => {\n      assertObject(observer)\n      return unit.watch(\n        isFunction(observer)\n          ? observer\n          : (upd: any) => observer.next && observer.next(upd),\n      )\n    }\n    unit[observableSymbol] = () => unit\n    const template = readTemplate()\n    if (template) meta.nativeTemplate = template\n  }\n  return meta\n}\nexport const createNamedEvent = (named: string) => createEvent({named})\n\nconst deriveEvent = (\n  event: Event<any>,\n  op: 'map' | 'filterMap' | 'filter',\n  fn: Function,\n  node: Cmd[],\n) => {\n  let config\n  if (isObject(fn)) {\n    config = fn\n    fn = (fn as unknown as {fn: Function}).fn\n  }\n  const mapped = createEvent({\n    name: `${event.shortName} → *`,\n    derived: true,\n    and: config,\n  })\n  createLinkNode(event, mapped, node, op, fn)\n  return mapped\n}\n\nfunction callCreate<T>(\n  unit: Event<T> | Effect<T, any, any>,\n  template: Template | null,\n  payload: T,\n  args: any[],\n) {\n  const oldPage = currentPage\n  let page = null\n  if (template) {\n    page = currentPage\n    while (page && page.template !== template) {\n      page = getParent(page)\n    }\n  }\n  setCurrentPage(page)\n  const result = unit.create(payload, args)\n  setCurrentPage(oldPage)\n  return result\n}\n\nexport function createEvent<Payload = any>(\n  nameOrConfig?: any,\n  maybeConfig?: any,\n): Event<Payload> {\n  const config = flattenConfig({\n    or: maybeConfig,\n    and: typeof nameOrConfig === 'string' ? {name: nameOrConfig} : nameOrConfig,\n  }) as any\n  const event = ((payload: Payload, ...args: unknown[]) => {\n    deprecate(\n      !getMeta(event, 'derived'),\n      'call of derived event',\n      'createEvent',\n    )\n    deprecate(!isPure, 'unit call from pure function', 'operators like sample')\n    if (currentPage) {\n      return callCreate(event, template, payload, args)\n    }\n    return event.create(payload, args)\n  }) as Event<Payload>\n  const template = readTemplate()\n  const finalEvent = Object.assign(event, {\n    graphite: createNode({\n      meta: initUnit(EVENT, event, config),\n      regional: true,\n    }),\n    create(params: Payload, _: any[]) {\n      launch({target: event, params, scope: forkPage!})\n      return params\n    },\n    watch: (fn: (payload: Payload) => any) => watchUnit(event, fn),\n    map: (fn: Function) => deriveEvent(event, MAP, fn, [userFnCall()]),\n    filter: (fn: {fn: Function}) =>\n      //@ts-expect-error\n      deriveEvent(event, FILTER, fn.fn ? fn : fn.fn, [\n        userFnCall(callStack, true),\n      ]),\n    filterMap: (fn: Function) =>\n      deriveEvent(event, 'filterMap', fn, [\n        userFnCall(),\n        calc(value => !isVoid(value), true),\n      ]),\n    prepend(fn: Function) {\n      const contramapped: Event<any> = createEvent('* → ' + event.shortName, {\n        parent: getParent(event),\n      })\n      applyTemplate('eventPrepend', getGraph(contramapped))\n      createLinkNode(contramapped, event, [userFnCall()], 'prepend', fn)\n      applyParentHook(event, contramapped)\n      return contramapped\n    },\n  })\n  if (config?.domain) {\n    config.domain.hooks.event(finalEvent)\n  }\n  return finalEvent\n}\nfunction on<State>(\n  store: Store<State>,\n  methodName: string,\n  nodeSet: CommonUnit | CommonUnit[],\n  fn: Function,\n) {\n  assertNodeSet(nodeSet, methodName, 'first argument')\n  assert(isFunction(fn), 'second argument should be a function')\n  deprecate(\n    !getMeta(store, 'derived'),\n    `${methodName} in derived store`,\n    `${methodName} in store created via createStore`,\n  )\n  forEach(Array.isArray(nodeSet) ? nodeSet : [nodeSet], trigger => {\n    store.off(trigger)\n    getSubscribers(store).set(\n      trigger,\n      createSubscription(updateStore(trigger, store, 'on', callARegStack, fn)),\n    )\n  })\n  return store\n}\nexport function createStore<State>(\n  defaultState: State,\n  props?: Config,\n): Store<State> {\n  const config = flattenConfig(props)\n  const plainState = createStateRef(defaultState)\n  const updates = createEvent({named: 'updates', derived: true})\n  applyTemplate('storeBase', plainState)\n  const plainStateId = plainState.id\n  const store = {\n    subscribers: new Map(),\n    updates,\n    defaultState,\n    stateRef: plainState,\n    getState() {\n      let targetRef = plainState\n      let reachedPage\n      if (currentPage) {\n        let page = currentPage\n        while (page && !page.reg[plainStateId]) {\n          page = getParent(page)\n        }\n        if (page) reachedPage = page\n      }\n      if (!reachedPage && forkPage) {\n        initRefInScope(forkPage, plainState, true)\n        reachedPage = forkPage\n      }\n      if (reachedPage) targetRef = reachedPage.reg[plainStateId]\n      return readRef(targetRef)\n    },\n    setState: (state: State) =>\n      launch({\n        target: store,\n        params: state,\n        defer: true,\n        scope: forkPage!,\n      }),\n    reset(...units: CommonUnit[]) {\n      forEach(units, unit =>\n        on(store, '.reset', unit, () => store.defaultState),\n      )\n      return store\n    },\n    on(nodeSet: CommonUnit | CommonUnit[], fn: Function) {\n      return on(store, '.on', nodeSet, fn)\n    },\n    off(unit: CommonUnit) {\n      const currentSubscription = getSubscribers(store).get(unit)\n      if (currentSubscription) {\n        currentSubscription()\n        getSubscribers(store).delete(unit)\n      }\n      return store\n    },\n    map(fn: (value: any, prevArg?: any) => any, firstState?: any) {\n      let config\n      if (isObject(fn)) {\n        config = fn\n        fn = (fn as unknown as {fn: (value: any) => any}).fn\n      }\n      deprecate(\n        isVoid(firstState),\n        'second argument of store.map',\n        'updateFilter',\n      )\n      let lastResult\n      const storeState = store.getState()\n      const template = readTemplate()\n      if (template) {\n        lastResult = null\n      } else if (!isVoid(storeState)) {\n        lastResult = fn(storeState, firstState)\n      }\n\n      const innerStore: Store<any> = createStore(lastResult, {\n        name: `${store.shortName} → *`,\n        derived: true,\n        // @ts-expect-error some mismatch in config types\n        and: config,\n      })\n      const linkNode = updateStore(store, innerStore, MAP, callStackAReg, fn)\n      addRefOp(getStoreState(innerStore), {\n        type: MAP,\n        fn,\n        from: plainState,\n      })\n      getStoreState(innerStore).noInit = true\n      applyTemplate('storeMap', plainState, linkNode)\n      return innerStore\n    },\n    watch(eventOrFn: any, fn?: Function) {\n      if (!fn || !is.unit(eventOrFn)) {\n        const subscription = watchUnit(store, eventOrFn)\n        if (!applyTemplate('storeWatch', plainState, eventOrFn)) {\n          eventOrFn(store.getState())\n        }\n        return subscription\n      }\n      assert(isFunction(fn), 'second argument should be a function')\n      return (eventOrFn as CommonUnit).watch((payload: any) =>\n        fn(store.getState(), payload),\n      )\n    },\n  } as unknown as Store<State>\n  const meta = initUnit(STORE, store, config)\n  const updateFilter = store.defaultConfig.updateFilter\n  store.graphite = createNode({\n    scope: {state: plainState, fn: updateFilter},\n    node: [\n      calc((upd, _, stack) => {\n        if (stack.scope && !stack.scope.reg[plainState.id]) {\n          stack.b = true\n        }\n        return upd\n      }),\n      read(plainState),\n      calc((upd, _, {a, b}) => !isVoid(upd) && (upd !== a || b), true),\n      updateFilter && userFnCall(callStackAReg, true),\n      mov({from: STACK, target: plainState}),\n    ],\n    child: updates,\n    meta,\n    regional: true,\n  })\n  const serializeMeta = getMeta(store, 'serialize')\n  const derived = getMeta(store, 'derived')\n  const ignored = serializeMeta === 'ignore'\n  const customSerialize = !serializeMeta || ignored ? false : serializeMeta\n  const sid: string | null = getMeta(store, 'sid')\n  if (sid) {\n    setMeta(store, 'storeChange', true)\n    plainState.sid = sid\n\n    if (customSerialize) {\n      plainState.meta = {\n        ...plainState?.meta,\n        serialize: customSerialize,\n      }\n    }\n  }\n  if (!sid && !ignored && !derived) {\n    setMeta(store, 'warnSerialize', true)\n  }\n  assert(\n    derived || !isVoid(defaultState),\n    \"current state can't be undefined, use null instead\",\n  )\n  own(store, [updates])\n  if (config?.domain) {\n    config.domain.hooks.store(store)\n  }\n\n  if (!derived) {\n    store.reinit = createEvent<void>()\n    store.reset(store.reinit)\n  }\n\n  return store\n}\n\nconst updateStore = (\n  from: CommonUnit,\n  store: Store<any>,\n  op: string,\n  caller: typeof callStackAReg,\n  fn: Function,\n) => {\n  const storeRef = getStoreState(store)\n  const reader = mov({\n    store: storeRef,\n    to: REG_A,\n    priority: 'read',\n  })\n  if (op === MAP) reader.data.softRead = true\n  const node = [reader, userFnCall(caller)]\n  applyTemplate(\n    'storeOnMap',\n    storeRef,\n    node,\n    is.store(from) && getStoreState(from),\n  )\n  return createLinkNode(from, store, node, op, fn)\n}\n", "import type {Store} from './unit.h'\nimport {createStore} from './createUnit'\nimport {createStateRef, addRefOp} from './stateRef'\nimport {mov, calc, read, userFnCall} from './step'\nimport {processArgsToConfig} from './config'\nimport {getStoreState, setMeta} from './getter'\nimport {is, isFunction, isObject, isVoid} from './is'\nimport {unitObjectName} from './naming'\nimport {createLinkNode} from './forward'\nimport {assert, deprecate} from './throw'\nimport {readTemplate} from './region'\nimport {forIn} from './collection'\nimport {BARRIER, MAP, REG_A, VALUE} from './tag'\nimport {applyTemplate} from './template'\nimport type {Config} from './index.h'\n\nexport function combine(...args: any[]): Store<any> {\n  let handler\n  let stores\n  let config\n  ;[args, config] = processArgsToConfig(args)\n  const rawHandler = args[args.length - 1]\n  if (isFunction(rawHandler)) {\n    stores = args.slice(0, -1)\n    handler = rawHandler\n  } else {\n    stores = args\n  }\n\n  let structStoreShape\n  let shapeReady\n  if (stores.length === 1) {\n    const obj = stores[0]\n    /*\n      without edge case combine(Color, (Color) => '~')\n      */\n    if (!is.store(obj)) {\n      /*\n      case combine([R,G,B], ([R,G,B]) => '~')\n      case combine({R,G,B}, ({R,G,B}) => '~')\n\n      edge case combine([Color], ([Color]) => '~')\n      edge case combine({Color}, ({Color}) => '~')\n\n      edge case combine([R,G,B])\n      edge case combine({R,G,B})\n\n      edge case combine([Color])\n      edge case combine({Color})\n      */\n      structStoreShape = obj\n      shapeReady = true\n    }\n  }\n  let noArraySpread: boolean | void\n  if (!shapeReady) {\n    /*\n    case combine(R,G,B, (R,G,B) => '~')\n    */\n    structStoreShape = stores\n    /*\n    without edge case combine(R,G,B)\n    without edge case combine(Color)\n    */\n    if (handler) {\n      noArraySpread = true\n      const fn = handler\n      handler = (list: any[]) => fn(...list)\n    }\n  }\n  assert(isObject(structStoreShape), 'shape should be an object')\n  return storeCombination(\n    Array.isArray(structStoreShape),\n    !noArraySpread,\n    structStoreShape,\n    config,\n    handler,\n  )\n}\n\nconst storeCombination = (\n  isArray: boolean,\n  needSpread: boolean,\n  obj: any,\n  config?: Config,\n  fn?: (upd: any) => any,\n) => {\n  const clone = isArray ? (list: any) => [...list] : (obj: any) => ({...obj})\n  const defaultState: Record<string, any> = isArray ? [] : {}\n\n  const stateNew = clone(defaultState)\n  const rawShape = createStateRef(stateNew)\n  const isFresh = createStateRef(true)\n  rawShape.type = isArray ? 'list' : 'shape'\n  rawShape.noInit = true\n  applyTemplate('combineBase', rawShape, isFresh)\n  const store = createStore(stateNew, {\n    name: unitObjectName(obj),\n    derived: true,\n    and: config,\n  })\n  const storeStateRef = getStoreState(store)\n  storeStateRef.noInit = true\n  setMeta(store, 'isCombine', true)\n  const rawShapeReader = read(rawShape)\n  /**\n   * usual ref reading has very high priority, which leads to data races\n   * ref reading for combine should have same \"barrier\" priority but without batching\n   * (thats why order has no \"barrierID\" field, which assume batching)\n   **/\n  rawShapeReader.order = {priority: 'barrier'}\n  const node = [\n    calc((upd, _, stack) => {\n      if (stack.scope && !stack.scope.reg[rawShape.id]) {\n        stack.c = true\n      }\n      return upd\n    }),\n    rawShapeReader,\n    mov({store: isFresh, to: 'b'}),\n    calc((upd, {key}, reg) => {\n      if (reg.c || upd !== reg.a[key]) {\n        if (needSpread && reg.b) {\n          reg.a = clone(reg.a)\n        }\n        reg.a[key] = upd\n        return true\n      }\n    }, true),\n    mov({from: REG_A, target: rawShape}),\n    mov({from: VALUE, store: false, target: isFresh}),\n    mov({\n      from: VALUE,\n      store: true,\n      target: isFresh,\n      priority: BARRIER,\n      batch: true,\n    }),\n    read(rawShape, true),\n    fn && userFnCall(),\n  ]\n  forIn(obj, (child: Store<any> | any, key) => {\n    if (!is.store(child)) {\n      assert(\n        !is.unit(child) && !isVoid(child),\n        `combine expects a store in a field ${key}`,\n      )\n      stateNew[key] = defaultState[key] = child\n      return\n    }\n    defaultState[key] = child.defaultState\n    stateNew[key] = child.getState()\n    const linkNode = createLinkNode(child, store, node, 'combine', fn)\n    linkNode.scope.key = key\n    const childRef = getStoreState(child)\n    addRefOp(rawShape, {type: 'field', field: key, from: childRef})\n    applyTemplate('combineField', childRef, linkNode)\n  })\n\n  store.defaultShape = obj\n  addRefOp(storeStateRef, {\n    type: MAP,\n    from: rawShape,\n    fn,\n  })\n  if (!readTemplate()) {\n    store.defaultState = fn\n      ? (storeStateRef.current = fn(stateNew))\n      : defaultState\n  }\n  return store\n}\n\nexport function createStoreObject(...args: any[]) {\n  deprecate(false, 'createStoreObject', 'combine')\n  return combine(...args)\n}\n", "import type {Defer} from './unit.h'\n\nexport function createDefer(): Defer {\n  const result = {} as Defer\n  result.req = new Promise((rs, rj) => {\n    result.rs = rs\n    result.rj = rj\n  })\n  result.req.catch(() => {})\n  return result\n}\n", "import type {Unit, Stack} from './index.h'\nimport type {Effect, Scope} from './unit.h'\nimport {calc, run} from './step'\nimport {getForkPage, getGraph, getMeta, getParent, setMeta} from './getter'\nimport {own} from './own'\nimport {createNode} from './createNode'\nimport {launch, setForkPage, forkPage, isWatch} from './kernel'\nimport {createStore, createEvent} from './createUnit'\nimport {createDefer} from './defer'\nimport {isObject, isFunction} from './is'\nimport {assert} from './throw'\nimport {EFFECT} from './tag'\nimport {add, removeItem} from './collection'\nimport {flattenConfig} from './config'\nimport {nextEffectID} from './id'\n\ntype RunnerData<Params, Done, Fail> = {\n  params: Params\n  req: {\n    rs(data: Done): void\n    rj(data: Fail): void\n  }\n  args?: [params: Params, computedParams: any] | [params: Params]\n  handler?: Function\n}\n\nexport function createEffect<Params, Done, Fail = Error>(\n  nameOrConfig: any,\n  maybeConfig?: any,\n): Effect<Params, Done, Fail> {\n  const config = flattenConfig(\n    isFunction(nameOrConfig) ? {handler: nameOrConfig} : nameOrConfig,\n    maybeConfig,\n  )\n  const instance = createEvent(\n    isFunction(nameOrConfig) ? {handler: nameOrConfig} : nameOrConfig,\n    maybeConfig,\n  ) as unknown as Effect<Params, Done, Fail>\n  const node = getGraph(instance)\n  setMeta(node, 'op', (instance.kind = EFFECT))\n  //@ts-expect-error\n  instance.use = (fn: Function) => {\n    assert(isFunction(fn), '.use argument should be a function')\n    runner.scope.handler = fn\n    return instance\n  }\n  instance.use.getCurrent = () => runner.scope.handler\n  const anyway = (instance.finally = createEvent({\n    named: 'finally',\n    derived: true,\n  }))\n  const done = (instance.done = (anyway as any).filterMap({\n    named: 'done',\n    fn({\n      status,\n      params,\n      result,\n    }: {\n      status: 'done' | 'fail'\n      params: Params\n      result: Done\n      error: Fail\n    }) {\n      if (status === 'done') return {params, result}\n    },\n  }))\n  const fail = (instance.fail = (anyway as any).filterMap({\n    named: 'fail',\n    fn({\n      status,\n      params,\n      error,\n    }: {\n      status: 'done' | 'fail'\n      params: Params\n      result: Done\n      error: Fail\n    }) {\n      if (status === 'fail') return {params, error}\n    },\n  }))\n  const doneData = (instance.doneData = done.map({\n    named: 'doneData',\n    fn: ({result}: {result: Done}) => result,\n  }))\n  const failData = (instance.failData = fail.map({\n    named: 'failData',\n    fn: ({error}: {error: Fail}) => error,\n  }))\n\n  const runner = createNode({\n    scope: {\n      handlerId: getMeta(node, 'sid'),\n      handler:\n        instance.defaultConfig.handler ||\n        (() => assert(false, `no handler used in ${instance.getType()}`)),\n    },\n    node: [\n      calc(\n        (upd: RunnerData<Params, Done, Fail>, scope_, stack) => {\n          const scope: {handlerId: string; handler: Function} = scope_ as any\n          let handler = scope.handler\n          if (getForkPage(stack)) {\n            const handler_ = getForkPage(stack)!.handlers[scope.handlerId]\n            if (handler_) handler = handler_\n          }\n          upd.handler = handler\n          return upd\n        },\n        false,\n        true,\n      ),\n      calc(\n        (\n          {\n            params,\n            req,\n            handler,\n            args = [params],\n          }: RunnerData<Params, Done, Fail> & {handler: Function},\n          _,\n          stack,\n        ) => {\n          const scopeRef = createScopeRef(stack)\n          const onResolve = onSettled(\n            params,\n            req,\n            true,\n            anyway,\n            stack,\n            scopeRef,\n          )\n          const onReject = onSettled(\n            params,\n            req,\n            false,\n            anyway,\n            stack,\n            scopeRef,\n          )\n          const [ok, result] = runFn(handler, onReject, args)\n          if (ok) {\n            if (isObject(result) && isFunction(result.then)) {\n              result.then(onResolve, onReject)\n            } else {\n              onResolve(result)\n            }\n          }\n        },\n        false,\n        true,\n      ),\n    ],\n    meta: {op: 'fx', fx: 'runner'},\n  })\n  node.scope.runner = runner\n  add(\n    node.seq,\n    calc(\n      (params, {runner}, stack) => {\n        const upd: RunnerData<Params, Done, Fail> = getParent(stack)\n          ? {params, req: {rs(data: Done) {}, rj(data: Fail) {}}}\n          : /** empty stack means that this node was launched directly */\n            params\n        if (!stack.meta) {\n          stack.meta = {fxID: nextEffectID()}\n        }\n        launch({\n          target: runner,\n          params: upd,\n          defer: true,\n          scope: getForkPage(stack),\n          meta: stack.meta,\n        })\n        return upd.params\n      },\n      false,\n      true,\n    ),\n  )\n  //@ts-expect-error\n  instance.create = (params: Params) => {\n    const req = createDefer()\n    const payload = {params, req}\n    if (forkPage) {\n      if (!isWatch) {\n        const savedFork = forkPage\n        req.req\n          .finally(() => {\n            setForkPage(savedFork)\n          })\n          .catch(() => {})\n      }\n    }\n    launch({\n      target: instance,\n      params: payload,\n      scope: forkPage,\n    })\n    return req.req\n  }\n\n  const inFlight = (instance.inFlight = createStore(0, {\n    serialize: 'ignore',\n  })\n    .on(instance, x => x + 1)\n    .on(anyway, x => x - 1)\n    .map({\n      // @ts-expect-error\n      fn: x => x,\n      named: 'inFlight',\n    }))\n  setMeta(anyway, 'needFxCounter', 'dec')\n  setMeta(instance, 'needFxCounter', true)\n  const pending = (instance.pending = inFlight.map({\n    //@ts-expect-error\n    fn: amount => amount > 0,\n    named: 'pending',\n  }))\n\n  own(instance, [anyway, done, fail, doneData, failData, pending, inFlight])\n  if (config?.domain) {\n    config.domain.hooks.effect(instance)\n  }\n  return instance\n}\nexport const runFn = (\n  fn: Function,\n  onReject: (data: any) => void,\n  args: any[],\n): [boolean, any] => {\n  try {\n    return [true, fn(...args)]\n  } catch (err) {\n    onReject(err)\n    return [false, null]\n  }\n}\n\nexport const createScopeRef = (stack: Stack) => {\n  const scope = getForkPage(stack)\n  const scopeRef = {ref: scope}\n  if (scope) add(scope.activeEffects, scopeRef)\n  return scopeRef\n}\n\nexport const onSettled =\n  (\n    params: any,\n    req: {\n      rs(_: any): void\n      rj(_: any): void\n    },\n    ok: boolean,\n    anyway: Unit,\n    stack: Stack,\n    scopeRef: {ref: Scope | void},\n  ) =>\n  (data: any) => {\n    if (scopeRef.ref) removeItem(scopeRef.ref.activeEffects, scopeRef)\n    launch({\n      target: [anyway, sidechain],\n      params: [\n        ok\n          ? {status: 'done', params, result: data}\n          : {status: 'fail', params, error: data},\n        {value: data, fn: ok ? req.rs : req.rj},\n      ],\n      defer: true,\n      // WARN! Will broke forest pages as they arent moved to new scope\n      page: stack.page,\n      scope: scopeRef.ref,\n      meta: stack.meta,\n    })\n  }\nconst sidechain = createNode({\n  node: [run({fn: ({fn, value}) => fn(value)})],\n  meta: {op: 'fx', fx: 'sidechain'},\n})\n", "import type {Domain} from './unit.h'\nimport {combine} from './combine'\nimport {createEffect, createScopeRef, onSettled, runFn} from './createEffect'\nimport {applyParentHook} from './createUnit'\nimport {processArgsToConfig} from './config'\nimport {\n  getGraph,\n  getParent,\n  getStoreState,\n  setMeta,\n  getCompositeName,\n} from './getter'\nimport {own} from './own'\nimport {is} from './is'\nimport {read, calc} from './step'\nimport {launch} from './kernel'\nimport {EFFECT} from './tag'\nimport {createName} from './naming'\n\nexport function attach(config: any) {\n  let injected\n  ;[config, injected] = processArgsToConfig(config, true)\n  let {source, effect, mapParams} = config\n  const attached = createEffect(config, injected)\n  setMeta(attached, 'attached', true)\n  const {runner} = getGraph(attached).scope\n  let runnerSteps\n  const runnerFnStep = calc(\n    (upd, _, stack) => {\n      const {params, req, handler} = upd\n      const anyway = attached.finally\n      const scopeRef = createScopeRef(stack)\n      const rj = onSettled(params, req, false, anyway, stack, scopeRef)\n      const sourceData = stack.a\n      const isEffectHandler = is.effect(handler)\n      let ok = true\n      let computedParams\n      if (mapParams) {\n        ;[ok, computedParams] = runFn(mapParams, rj, [params, sourceData])\n      } else {\n        computedParams = source && isEffectHandler ? sourceData : params\n      }\n      if (ok) {\n        if (isEffectHandler) {\n          launch({\n            target: handler as any,\n            params: {\n              params: computedParams,\n              req: {\n                rs: onSettled(params, req, true, anyway, stack, scopeRef),\n                rj,\n              },\n            },\n            page: stack.page,\n            defer: true,\n            meta: stack.meta,\n          })\n        } else {\n          upd.args = [sourceData, computedParams]\n          return true\n        }\n      }\n    },\n    true,\n    true,\n  )\n  if (source) {\n    let state\n    if (is.store(source)) {\n      state = source\n      own(state, [attached])\n    } else {\n      state = combine(source)\n      own(attached, [state])\n    }\n    runnerSteps = [read(getStoreState(state)), runnerFnStep]\n  } else {\n    runnerSteps = [runnerFnStep]\n  }\n  runner.seq.splice(1, 0, ...runnerSteps)\n  attached.use(effect)\n  const parentDomain: Domain | void = getParent(effect)\n  if (parentDomain) {\n    Object.assign(\n      getCompositeName(attached),\n      createName(attached.shortName, parentDomain),\n    )\n    attached.defaultConfig.parent = parentDomain\n  }\n  applyParentHook(effect, attached, EFFECT)\n  return attached\n}\n", "import type {Store, Event} from './unit.h'\nimport {createEvent, applyParentHook} from './createUnit'\nimport {forIn} from './collection'\nimport {getParent} from './getter'\nimport {processArgsToConfig} from './config'\n\nexport function createApi(...args: [Store<any>, {[key: string]: Function}]) {\n  let [[store, setters], metadata] = processArgsToConfig(args)\n  const result: Record<string, Event<any>> = {}\n  forIn(setters, (fn, key) => {\n    const event = (result[key] = createEvent(key, {\n      parent: getParent(store),\n      config: metadata,\n    }))\n    store.on(event, fn)\n    applyParentHook(store, event)\n  })\n  return result\n}\n", "import type {Domain} from './unit.h'\nimport {own} from './own'\nimport {createNode} from './createNode'\nimport type {Config, NodeUnit} from './index.h'\nimport {\n  createEvent,\n  createNamedEvent,\n  createStore,\n  initUnit,\n} from './createUnit'\nimport {createEffect} from './createEffect'\nimport {createLinkNode} from './forward'\nimport {add, forEach, forIn} from './collection'\nimport {getGraph, getParent} from './getter'\nimport {DOMAIN} from './tag'\nimport {launch} from './kernel'\nimport {calc} from './step'\nimport {flattenConfig} from './config'\n\nexport function createDomain(nameOrConfig: any, maybeConfig?: any): Domain {\n  const config = flattenConfig({\n    or: maybeConfig,\n    and: typeof nameOrConfig === 'string' ? {name: nameOrConfig} : nameOrConfig,\n  }) as any\n\n  const node = createNode({\n    family: {type: DOMAIN},\n    regional: true,\n    parent: config?.domain || config?.parent,\n  })\n\n  const domain = {\n    history: {},\n    graphite: node,\n    hooks: {},\n  } as Domain\n\n  node.meta = initUnit(DOMAIN, domain, {\n    parent: config?.domain || config?.parent,\n    or: config,\n  })\n\n  forIn(\n    {\n      Event: createEvent,\n      Effect: createEffect,\n      Store: createStore,\n      Domain: createDomain,\n    },\n    (factory, tag) => {\n      const lowerCaseTag = tag.toLowerCase() as\n        | 'event'\n        | 'effect'\n        | 'store'\n        | 'domain'\n\n      const onCreateUnit = createNamedEvent(`on${tag}`)\n      domain.hooks[lowerCaseTag] = onCreateUnit\n\n      const history = new Set<any>()\n      domain.history[`${lowerCaseTag}s`] = history\n\n      onCreateUnit.create = unit => {\n        launch(onCreateUnit, unit)\n        return unit\n      }\n      add(\n        getGraph(onCreateUnit).seq,\n        calc((upd, _, stack) => {\n          stack.scope = null\n          return upd\n        }),\n      )\n      onCreateUnit.watch(unit => {\n        own(domain, [unit])\n        history.add(unit)\n        if (!unit.ownerSet) unit.ownerSet = history\n        if (!getParent(unit)) unit.parent = domain\n      })\n      own(domain, [onCreateUnit])\n\n      domain[`onCreate${tag}`] = (hook: (unit: any) => any) => {\n        forEach(history, hook)\n        return onCreateUnit.watch(hook)\n      }\n      domain[`create${tag}`] = domain[lowerCaseTag] = (\n        nameOrConfig: any,\n        rawConfig?: Config,\n      ) => {\n        const config = flattenConfig({and: rawConfig, or: nameOrConfig})\n        if (config?.domain) {\n          // @ts-expect-error complicated factory type\n          return factory(nameOrConfig, rawConfig)\n        }\n        // @ts-expect-error complicated factory type\n        return onCreateUnit(factory(nameOrConfig, {parent: domain, or: config}))\n      }\n    },\n  )\n\n  const parent = getParent(domain)\n  if (parent) {\n    forIn(domain.hooks, (from: NodeUnit, key) =>\n      createLinkNode(from, parent.hooks[key]),\n    )\n  }\n  if (config?.domain) {\n    config.domain.hooks.domain(domain)\n  }\n  return domain\n}\n", "import {observableSymbol} from './observable'\nimport type {Event} from './unit.h'\nimport {createEvent} from './createUnit'\nimport {assertObject} from './is'\nimport {assert} from './throw'\nimport {createSubscription} from './subscription'\n\nexport function fromObservable<T>(observable: any): Event<T> {\n  assertObject(observable)\n  const observableItem =\n    observableSymbol in observable ? observable[observableSymbol]() : observable\n  assert(observableItem.subscribe, 'expect observable to have .subscribe')\n  const event = createEvent<T>()\n  const disposer = createSubscription(event)\n  observableItem.subscribe({\n    next: event,\n    error: disposer,\n    complete: disposer,\n  })\n  return event\n}\n", "import type {Store, Event, Effect} from './unit.h'\nimport {createEvent} from './createUnit'\nimport {createLinkNode} from './forward'\nimport {unitObjectName} from './naming'\nimport {assertNodeSet} from './is'\n\nexport function merge<T>(\n  units: Array<Event<T> | Store<T> | Effect<T, any, any>>,\n  config?: object,\n): Event<T> {\n  assertNodeSet(units, 'merge', 'first argument')\n  const result = createEvent({\n    name: unitObjectName(units, 'merge'),\n    derived: true,\n    and: config,\n  })\n  createLinkNode(units, result, [], 'merge')\n  return result\n}\n", "import type {Cmd, StateRef} from './index.h'\nimport type {CommonUnit, DataCarrier} from './unit.h'\nimport {combine} from './combine'\nimport {mov, userFnCall, read, calc} from './step'\nimport {createStateRef, readRef} from './stateRef'\nimport {callStackAReg} from './caller'\nimport {processArgsToConfig} from './config'\nimport {getStoreState, getGraph} from './getter'\nimport {\n  assertNodeSet,\n  assertTarget,\n  is,\n  isObject,\n  isVoid,\n  isFunction,\n} from './is'\nimport {createStore} from './createUnit'\nimport {createEvent} from './createUnit'\nimport {createNode} from './createNode'\nimport {assert} from './throw'\nimport {forEach} from './collection'\nimport {SAMPLE, STACK, VALUE} from './tag'\nimport {merge} from './merge'\nimport {applyTemplate} from './template'\nimport {own} from './own'\nimport {createLinkNode} from './forward'\n\nconst sampleConfigFields = ['source', 'clock', 'target']\n\nconst fieldErrorMessage = (method: string, field: string) =>\n  method + `: ${field} should be defined`\n\nexport function validateSampleConfig(config: any, method: string) {\n  let atLeastOneFieldExists = false\n  forEach(sampleConfigFields, field => {\n    if (field in config) {\n      assert(config[field] != null, fieldErrorMessage(method, field))\n      atLeastOneFieldExists = true\n    }\n  })\n  return atLeastOneFieldExists\n}\n\nexport function sample(...args: any[]) {\n  let target\n  let name\n  let [[source, clock, fn], metadata] = processArgsToConfig(args)\n  let sid\n  let batched = true\n  let filter\n  /** config case */\n  if (\n    isVoid(clock) &&\n    isObject(source) &&\n    validateSampleConfig(source, SAMPLE)\n  ) {\n    clock = source.clock\n    fn = source.fn\n    batched = !source.greedy\n    filter = source.filter\n    /** optional target & name accepted only from config */\n    target = source.target\n    name = source.name\n    sid = source.sid\n    source = source.source\n  }\n  return createSampling(\n    SAMPLE,\n    clock,\n    source,\n    filter,\n    target,\n    fn,\n    name,\n    metadata,\n    batched,\n    true,\n    false,\n    sid,\n  )\n}\n\nexport const createSampling = (\n  method: string,\n  clock: DataCarrier | DataCarrier[] | void,\n  source: DataCarrier | Array<Store<any>> | Record<string, Store<any>> | void,\n  filter: any,\n  target: DataCarrier | DataCarrier[] | void,\n  fn: any,\n  name: string | undefined,\n  metadata: object | void,\n  batched: boolean,\n  targetMayBeStore: boolean,\n  filterRequired: boolean,\n  sid?: string | undefined,\n) => {\n  const isUpward = !!target\n  assert(\n    !isVoid(source) || !isVoid(clock),\n    fieldErrorMessage(method, 'either source or clock'),\n  )\n  let sourceIsClock = false\n  if (isVoid(source)) {\n    sourceIsClock = true\n  } else if (!is.unit(source)) {\n    source = combine(source)\n  }\n  if (isVoid(clock)) {\n    /** still undefined! */\n    clock = source\n  } else {\n    assertNodeSet(clock, method, 'clock')\n    if (Array.isArray(clock)) {\n      clock = merge(clock as CommonUnit[])\n    }\n  }\n  if (sourceIsClock) {\n    source = clock\n  }\n  // @ts-expect-error\n  if (!metadata && !name) name = source.shortName\n  let filterType: 'none' | 'unit' | 'fn' = 'none'\n  if (filterRequired || filter) {\n    if (is.unit(filter)) {\n      filterType = 'unit'\n    } else {\n      assert(isFunction(filter), '`filter` should be function or unit')\n      filterType = 'fn'\n    }\n  }\n  if (target) {\n    assertNodeSet(target, method, 'target')\n    assertTarget(method, target)\n  } else {\n    if (\n      filterType === 'none' &&\n      targetMayBeStore &&\n      is.store(source) &&\n      is.store(clock)\n    ) {\n      const initialState = fn\n        ? fn(readRef(getStoreState(source)), readRef(getStoreState(clock)))\n        : readRef(getStoreState(source))\n      // @ts-expect-error\n      target = createStore(initialState, {name, sid, or: metadata})\n    } else {\n      target = createEvent({name, derived: true, or: metadata})\n      applyTemplate('sampleTarget', getGraph(target))\n    }\n  }\n  // const targetTemplate =\n  //   isUpward && is.unit(target) && getGraph(target).meta.nativeTemplate\n  const clockState = createStateRef()\n  let filterNodes: Cmd[] = []\n  if (filterType === 'unit') {\n    const [filterRef, hasFilter] = syncSourceState(\n      filter as DataCarrier,\n      target,\n      // @ts-expect-error\n      clock,\n      clockState,\n      method,\n    )\n    filterNodes = [...readAndFilter(hasFilter), ...readAndFilter(filterRef)]\n  }\n  const [sourceRef, hasSource] = syncSourceState(\n    // @ts-expect-error\n    source,\n    target,\n    clock,\n    clockState,\n    method,\n  )\n  const jointNode = createLinkNode(\n    // @ts-expect-error\n    clock,\n    target,\n    [\n      applyTemplate('sampleSourceLoader'),\n      mov({from: STACK, target: clockState}),\n      ...readAndFilter(hasSource),\n      read(sourceRef, true, batched),\n      ...filterNodes,\n      read(clockState),\n      filterType === 'fn' && userFnCall((src, _, {a}) => filter(src, a), true),\n      fn && userFnCall(callStackAReg),\n      applyTemplate('sampleSourceUpward', isUpward),\n    ],\n    method,\n    fn,\n  )\n  // @ts-expect-error\n  own(source, [jointNode])\n  Object.assign(jointNode.meta, metadata, {joint: true})\n  return target\n}\n\nconst readAndFilter = (state: StateRef) => [\n  read(state),\n  calc((upd, scope, {a}) => a, true),\n]\n\nconst syncSourceState = (\n  source: DataCarrier,\n  target: DataCarrier | DataCarrier[],\n  clock: DataCarrier | DataCarrier[],\n  clockState: StateRef,\n  method: string,\n) => {\n  const isSourceStore = is.store(source)\n  const sourceRef = isSourceStore ? getStoreState(source) : createStateRef()\n  const hasSource = createStateRef(isSourceStore)\n  if (!isSourceStore) {\n    createNode({\n      parent: source,\n      node: [\n        mov({from: STACK, target: sourceRef}),\n        mov({from: VALUE, store: true, target: hasSource}),\n      ],\n      family: {owners: [source, target, clock], links: target},\n      meta: {op: method},\n      regional: true,\n    })\n  }\n  applyTemplate('sampleSource', hasSource, sourceRef, clockState)\n  return [sourceRef, hasSource] as const\n}\n", "import {processArgsToConfig} from './config'\nimport {validateSampleConfig, createSampling} from './sample'\n\nexport function guard(...args: any[]) {\n  let [[source, config], metadata] = processArgsToConfig(args)\n  if (!config) {\n    config = source\n    source = config.source\n  }\n  validateSampleConfig(config, 'guard')\n  return createSampling(\n    'guard',\n    config.clock,\n    source,\n    config.filter,\n    config.target,\n    null,\n    config.name,\n    metadata,\n    !config.greedy,\n    false,\n    true,\n  )\n}\n", "import {createStore} from './createUnit'\nimport {is} from './is'\nimport {forIn} from './collection'\nimport {getParent} from './getter'\nimport {createLinkNode} from './forward'\nimport {deprecate} from './throw'\n\nexport function restore(obj: any, defaultState: any, config?: any) {\n  if (is.store(obj)) {\n    deprecate(false, 'restore($store)')\n    return obj\n  }\n  if (is.event(obj) || is.effect(obj)) {\n    const domain = getParent(obj)\n    const result = createStore(defaultState, {\n      parent: domain,\n      name: obj.shortName,\n      and: config,\n    })\n    createLinkNode(is.effect(obj) ? obj.doneData : obj, result)\n    if (domain) domain.hooks.store(result)\n    return result\n  }\n  const result: Record<string, any> = Array.isArray(obj) ? [] : {}\n  forIn(\n    obj,\n    (value, key) =>\n      (result[key] = is.store(value) ? value : createStore(value, {name: key})),\n  )\n  return result\n}\n", "import type {DataCarrier} from './unit.h'\nimport type {Cmd, Stack} from './index.h'\nimport {is, isFunction, isObject, assertTarget} from './is'\nimport {add, forIn, includes} from './collection'\nimport {addRefOp, createStateRef} from './stateRef'\nimport {createLinkNode} from './forward'\nimport {processArgsToConfig} from './config'\nimport {compute, userFnCall, calc, read} from './step'\nimport {createNode} from './createNode'\nimport {launch} from './kernel'\nimport {getStoreState} from './getter'\nimport {assert} from './throw'\nimport {createEvent} from './createUnit'\nimport {applyTemplate} from './template'\nimport {createSampling} from './sample'\n\nconst launchCase = (\n  scopeTargets: Record<string, DataCarrier>,\n  field: string,\n  data: any,\n  stack: Stack,\n) => {\n  const target = scopeTargets[field]\n  if (target) {\n    launch({\n      target,\n      params: Array.isArray(target) ? target.map(() => data) : data,\n      defer: true,\n      stack,\n    })\n  }\n}\n\nexport function split(...args: any[]) {\n  const METHOD = 'split'\n  let targets: Record<string, DataCarrier>\n  let clock: void | DataCarrier | DataCarrier[]\n  let [[source, match], metadata] = processArgsToConfig(args)\n  const configForm = !match\n  if (configForm) {\n    targets = source.cases\n    match = source.match\n    clock = source.clock\n    source = source.source\n  }\n  const matchIsUnit = is.store(match)\n  const matchIsFunction = !is.unit(match) && isFunction(match)\n  const matchIsShape = !matchIsUnit && !matchIsFunction && isObject(match)\n  assert(is.unit(source), 'source must be a unit')\n  if (!targets!) targets = {}\n  if (!configForm) {\n    assert(matchIsShape, 'match should be an object')\n    forIn(\n      match,\n      (_, key) =>\n        (targets[key] = createEvent({\n          derived: true,\n          and: metadata,\n        })),\n    )\n    targets.__ = createEvent({derived: true, and: metadata})\n  } else {\n    forIn(targets, (target, field) =>\n      assertTarget(METHOD, target, `cases.${field}`),\n    )\n  }\n  const owners = new Set(\n    ([] as DataCarrier[]).concat(source, clock || [], Object.values(targets)),\n  )\n  const caseNames = Object.keys(\n    matchIsUnit || matchIsFunction ? targets : match,\n  )\n  let splitterSeq: Array<Cmd | false>\n  if (matchIsUnit || matchIsFunction) {\n    if (matchIsUnit) owners.add(match)\n    splitterSeq = [\n      matchIsUnit && read(getStoreState(match), false, true),\n      compute({\n        safe: matchIsUnit,\n        filter: true,\n        pure: !matchIsUnit,\n        fn(data, scopeTargets, stack) {\n          const value = String(matchIsUnit ? stack.a : match(data))\n          launchCase(\n            scopeTargets,\n            includes(caseNames, value) ? value : '__',\n            data,\n            stack,\n          )\n        },\n      }),\n    ]\n  } else if (matchIsShape) {\n    const lastValues = createStateRef({})\n    lastValues.type = 'shape'\n    const units = [] as string[]\n    let needBarrier: boolean\n    forIn(match, (storeOrFn, key) => {\n      if (is.unit(storeOrFn)) {\n        needBarrier = true\n        add(units, key)\n        // @ts-expect-error\n        owners.add(storeOrFn)\n        const updater = createLinkNode(\n          storeOrFn,\n          [],\n          [read(lastValues), calc((upd, _, {a}) => (a[key] = upd))],\n        )\n        if (is.store(storeOrFn)) {\n          lastValues.current[key] = storeOrFn.getState()\n          const storeRef = getStoreState(storeOrFn)\n          addRefOp(lastValues, {from: storeRef, field: key, type: 'field'})\n          applyTemplate('splitMatchStore', storeRef, updater)\n        }\n      }\n    })\n    if (needBarrier!) {\n      applyTemplate('splitBase', lastValues)\n    }\n    splitterSeq = [\n      needBarrier! && read(lastValues, false, true),\n      userFnCall((data, scopeTargets, stack) => {\n        for (let i = 0; i < caseNames.length; i++) {\n          const caseName = caseNames[i]\n          const caseValue = includes(units, caseName)\n            ? stack.a[caseName]\n            : match[caseName](data)\n          if (caseValue) {\n            launchCase(scopeTargets, caseName, data, stack)\n            return\n          }\n        }\n        launchCase(scopeTargets, '__', data, stack)\n      }, true),\n    ]\n  } else {\n    assert(false, 'expect match to be unit, function or object')\n  }\n  const splitterNode = createNode({\n    meta: {op: METHOD},\n    parent: clock ? [] : source,\n    scope: targets,\n    node: splitterSeq!,\n    family: {owners: Array.from(owners)},\n    regional: true,\n  })\n  if (clock) {\n    createSampling(\n      METHOD,\n      clock,\n      source,\n      null,\n      splitterNode,\n      null,\n      METHOD,\n      metadata,\n      /* non-batched */\n      false,\n      false,\n      false,\n    )\n  }\n  if (!configForm) return targets\n}\n", "import {add} from '../collection'\nimport {createDefer} from '../defer'\nimport {is} from '../is'\nimport {launch, forkPage} from '../kernel'\nimport type {Scope, Event, Effect, DataCarrier, SettledDefer} from '../unit.h'\n\nexport function allSettled<T>(\n  start: Event<T> | Effect<T, any, any> | Scope,\n  //@ts-expect-error its optional in correct cases\n  {scope, params: ctx}: {scope: Scope; params?: unknown} = {},\n) {\n  if (!is.unit(start))\n    return Promise.reject(new Error('first argument should be unit'))\n  if (\n    !is.effect(start) &&\n    !is.event(start) &&\n    !is.store(start) &&\n    !is.scope(start)\n  )\n    return Promise.reject(\n      new Error(\n        'first argument accepts only effects, events, stores or scopes',\n      ),\n    )\n  /** duplicated check because of ts validation */\n  if (is.scope(start)) {\n    scope = start\n  }\n  const defer = createDefer() as SettledDefer\n  defer.parentFork = forkPage\n  const {fxCount} = scope\n  add(fxCount.scope.defers, defer)\n\n  const launchUnits: DataCarrier[] = []\n  const launchParams: Array<{params: unknown; req: unknown} | null> = []\n  if (!is.scope(start)) {\n    add(launchUnits, start)\n    add(\n      launchParams,\n      is.effect(start)\n        ? {\n            params: ctx,\n            req: {\n              rs(value: unknown) {\n                defer.value = {status: 'done', value}\n              },\n              rj(value: unknown) {\n                defer.value = {status: 'fail', value}\n              },\n            },\n          }\n        : ctx,\n    )\n  }\n  add(launchUnits, fxCount)\n  add(launchParams, null)\n  launch({\n    target: launchUnits,\n    params: launchParams,\n    scope,\n  })\n  return defer.req\n}\n", "import {getMeta, getOwners, getLinks} from '../getter'\nimport {is} from '../is'\nimport {assert} from '../throw'\nimport type {Store, Effect, ValuesMap, HandlersMap} from '../unit.h'\nimport type {Node} from '../index.h'\nimport {add, forEach, includes} from '../collection'\nimport {STORE} from '../tag'\n\nexport function traverseStores(\n  root: Node,\n  fn: (node: Node, sid: string) => void,\n) {\n  const list = [] as Node[]\n  ;(function visit(node) {\n    if (includes(list, node)) return\n    add(list, node)\n    if (getMeta(node, 'op') === STORE && getMeta(node, 'sid')) {\n      fn(node, getMeta(node, 'sid'))\n    }\n    forEach(node.next, visit)\n    forEach(getOwners(node), visit)\n    forEach(getLinks(node), visit)\n  })(root)\n}\n\ntype StoreOrEffect = Store<any> | Effect<any, any, any>\n\nexport function normalizeValues(\n  values: ValuesMap | HandlersMap,\n  assertEach?: (key: StoreOrEffect, value: any) => void,\n) {\n  const mapOrRecordValues: Map<StoreOrEffect, any> | Record<string, any> =\n    Array.isArray(values) ? new Map(values as [StoreOrEffect, any][]) : values\n  if (mapOrRecordValues instanceof Map) {\n    const result = {} as Record<string, any>\n    forEach(mapOrRecordValues, (value, key) => {\n      assert(\n        (is.unit as (val: unknown) => val is StoreOrEffect)(key),\n        'Map key should be a unit',\n      )\n      if (assertEach) assertEach(key, value)\n      assert(key.sid, 'unit should have a sid')\n      assert(!(key.sid! in result), 'duplicate sid found')\n      result[key.sid!] = value\n    })\n    return result\n  }\n  return mapOrRecordValues\n}\n", "import {is} from '../is'\nimport {assert} from '../throw'\nimport type {Domain, ValuesMap, HandlersMap, Scope} from '../unit.h'\nimport {normalizeValues} from './util'\nimport {createScope} from './createScope'\nimport {forEach} from '../collection'\n\ntype ForkConfig = {\n  values?: ValuesMap\n  handlers?: HandlersMap\n  scope?: Scope\n}\n\nexport function fork(\n  domainOrConfig?: Domain | ForkConfig,\n  optionalConfig?: ForkConfig,\n) {\n  let config: ForkConfig | void = domainOrConfig as any\n  let domain: Domain\n  if (is.domain(domainOrConfig)) {\n    domain = domainOrConfig\n    config = optionalConfig\n  }\n\n  const scope = createScope(domain!)\n\n  if (config) {\n    const oldScope = config.scope\n    if (oldScope) {\n      const activeEffects = oldScope.activeEffects\n      oldScope.activeEffects = []\n      scope.activeEffects = activeEffects\n      forEach(activeEffects, scopeRef => (scopeRef.ref = scope))\n    }\n    if (config.values) {\n      const valuesSidMap = normalizeValues(config.values, unit =>\n        assert(is.store(unit), 'Values map can contain only stores as keys'),\n      )\n      Object.assign(scope.sidValuesMap, valuesSidMap)\n      scope.fromSerialize =\n        !Array.isArray(config.values) && !(config.values instanceof Map)\n    }\n    if (config.handlers) {\n      scope.handlers = normalizeValues(config.handlers, unit =>\n        assert(\n          is.effect(unit),\n          `Handlers map can contain only effects as keys`,\n        ),\n      )\n    }\n  }\n  return scope\n}\n", "import {getForkPage, getGraph, getMeta, getParent} from '../getter'\nimport {setForkPage, getPageRef, currentPage} from '../kernel'\nimport {createNode} from '../createNode'\nimport {calc, compute} from '../step'\nimport type {Domain, Scope, SettledDefer, Store} from '../unit.h'\nimport type {StateRef} from '../index.h'\nimport {forEach} from '../collection'\nimport {DOMAIN, SAMPLER, SCOPE} from '../tag'\n\nexport function createScope(unit?: Domain): Scope {\n  const forkInFlightCounter = createNode({\n    scope: {\n      defers: [],\n      inFlight: 0,\n      fxID: 0,\n    },\n    node: [\n      calc((_, scope, stack) => {\n        if (!getParent(stack)) {\n          scope.fxID += 1\n          return\n        }\n        if (getMeta(getParent(stack).node, 'needFxCounter') === 'dec') {\n          scope.inFlight -= 1\n        } else {\n          scope.inFlight += 1\n          scope.fxID += 1\n        }\n      }),\n      compute({priority: SAMPLER, batch: true}),\n      calc(\n        (\n          _,\n          scope: {\n            inFlight: number\n            fxID: number\n            defers: SettledDefer[]\n          },\n        ) => {\n          const {defers, fxID} = scope\n          if (scope.inFlight > 0 || defers.length === 0) return\n          Promise.resolve().then(() => {\n            if (scope.fxID !== fxID) return\n            forEach(defers.splice(0, defers.length), defer => {\n              setForkPage(defer.parentFork)\n              defer.rs(defer.value)\n            })\n          })\n        },\n        false,\n        true,\n      ),\n    ],\n  })\n  const page = {} as Record<string, StateRef>\n  const storeChange = createNode({\n    node: [\n      calc((value, __, stack) => {\n        const storeStack = getParent(stack)\n        if (storeStack) {\n          const storeNode = storeStack.node\n          if (\n            !getMeta(storeNode, 'isCombine') ||\n            (getParent(storeStack) &&\n              getMeta(getParent(storeStack).node, 'op') !== 'combine')\n          ) {\n            const forkPage = getForkPage(stack)!\n            const id = storeNode.scope.state.id\n            const sid = getMeta(storeNode, 'sid')\n            forkPage.sidIdMap[sid] = id\n            forkPage.sidValuesMap[sid] = value\n\n            const serialize = getMeta(storeNode, 'serialize')\n            if (serialize) {\n              if (serialize === 'ignore') {\n                forkPage.sidSerializeSettings.set(sid, {ignore: true})\n              } else {\n                forkPage.sidSerializeSettings.set(sid, {\n                  ignore: false,\n                  write: serialize.write,\n                })\n              }\n            }\n          }\n        }\n      }),\n    ],\n  })\n  const warnSerializeNode = createNode({\n    node: [\n      calc((_, __, stack) => {\n        const forkPage = getForkPage(stack)\n        if (forkPage) {\n          const storeStack = getParent(stack)\n          if (storeStack) {\n            const storeNode = storeStack.node\n            if (\n              !getMeta(storeNode, 'isCombine') ||\n              (getParent(storeStack) &&\n                getMeta(getParent(storeStack).node, 'op') !== 'combine')\n            ) {\n              forkPage.warnSerialize = true\n            }\n          }\n        }\n      }),\n    ],\n  })\n  const resultScope: Scope = {\n    cloneOf: unit,\n    reg: page,\n    sidValuesMap: {},\n    sidIdMap: {},\n    sidSerializeSettings: new Map(),\n    getState(store: StateRef | Store<any>) {\n      if ('current' in store) {\n        return getPageRef(currentPage, resultScope, null, store).current\n      }\n      const node = getGraph(store)\n      return getPageRef(currentPage, resultScope, node, node.scope.state, true)\n        .current\n    },\n    kind: SCOPE,\n    graphite: createNode({\n      family: {\n        type: DOMAIN,\n        links: [forkInFlightCounter, storeChange, warnSerializeNode],\n      },\n      meta: {unit: 'fork'},\n      scope: {forkInFlightCounter},\n    }),\n    additionalLinks: {},\n    handlers: {},\n    fxCount: forkInFlightCounter,\n    storeChange,\n    warnSerializeNode,\n    activeEffects: [],\n  }\n  return resultScope\n}\n", "import {is, isObject} from '../is'\nimport {assert} from '../throw'\nimport {launch} from '../kernel'\nimport type {Domain, Scope, ValuesMap} from '../unit.h'\nimport type {Node} from '../index.h'\nimport {add, includes} from '../collection'\nimport {normalizeValues, traverseStores} from './util'\nimport {getGraph, getMeta} from '../getter'\n\n/**\n hydrate state on client\n\n const root = createDomain()\n hydrate(root, {\n  values: window.__initialState__\n})\n\n */\nexport function hydrate(domain: Domain | Scope, {values}: {values: ValuesMap}) {\n  assert(isObject(values), 'values property should be an object')\n  const normalizedValues = normalizeValues(values)\n  const valuesSidList = Object.getOwnPropertyNames(normalizedValues)\n  const storeNodes: Node[] = []\n  const storeValues: any[] = []\n  let forkPage: Scope\n  let traverseTarget: Node\n  let needToAssign: true | void\n  if (is.scope(domain)) {\n    forkPage = domain\n    needToAssign = true\n    assert(forkPage.cloneOf, 'scope should be created from domain')\n    traverseTarget = getGraph(forkPage.cloneOf)\n  } else if (is.domain(domain)) {\n    traverseTarget = getGraph(domain)\n  } else {\n    assert(false, 'first argument of hydrate should be domain or scope')\n  }\n  traverseStores(traverseTarget!, (node, sid) => {\n    // forkPage.sidIdMap[sid] = node.scope.state.id\n    if (includes(valuesSidList, sid)) {\n      add(storeNodes, node)\n      const serializer = getMeta(node, 'serialize')\n      if (serializer && serializer !== 'ignore') {\n        normalizedValues[sid] = serializer.read(normalizedValues[sid])\n      }\n      add(storeValues, normalizedValues[sid])\n    }\n  })\n  launch({\n    target: storeNodes,\n    params: storeValues,\n    scope: forkPage!,\n  })\n  if (needToAssign) {\n    Object.assign(forkPage!.sidValuesMap, normalizedValues)\n  }\n}\n", "import {createDefer} from '../defer'\nimport {is} from '../is'\nimport {assert} from '../throw'\nimport {launch, forkPage} from '../kernel'\nimport type {Scope} from '../unit.h'\nimport type {Unit} from '../index.h'\n\n/** bind event to scope */\nexport function scopeBind(\n  unit: Unit,\n  {scope, safe}: {scope?: Scope; safe?: true} = {},\n) {\n  assert(\n    scope || forkPage || safe,\n    'scopeBind cannot be called outside of forked .watch',\n  )\n  const savedForkPage = scope || forkPage!\n  return is.effect(unit)\n    ? (params: any) => {\n        const req = createDefer()\n        launch({\n          target: unit,\n          params: {\n            params,\n            req,\n          },\n          scope: savedForkPage,\n        })\n        return req.req\n      }\n    : (params: any) => {\n        launch({target: unit, params, scope: savedForkPage})\n        return params\n      }\n}\n", "import type {Scope, Store} from '../unit.h'\nimport {forIn, includes} from '../collection'\nimport {assert} from '../throw'\nimport {traverseStores} from './util'\nimport {getGraph, getMeta} from '../getter'\n\nconst noopSerializer = (x: any) => x\n/**\n serialize state on server\n */\nexport function serialize(\n  scope: Scope,\n  config: {ignore?: Array<Store<any>>; onlyChanges?: boolean} = {},\n) {\n  if (scope.warnSerialize) {\n    console.error(\n      'There is a store without sid in this scope, its value is omitted',\n    )\n  }\n  const ignoredStores = config.ignore ? config.ignore.map(({sid}) => sid) : []\n  const result = {} as Record<string, any>\n  forIn(scope.sidValuesMap, (value, sid) => {\n    if (includes(ignoredStores, sid)) return\n    const id = scope.sidIdMap[sid]\n    const serializeSettings = scope.sidSerializeSettings.get(sid) ?? {\n      ignore: false,\n      write: noopSerializer,\n    }\n    if (serializeSettings.ignore) return\n    const serializer = serializeSettings.write\n    // if (!scope.changedStores.has(id)) return\n    if (id && id in scope.reg) {\n      result[sid] = serializer(scope.reg[id].current)\n    } else {\n      result[sid] = serializer(value)\n    }\n  })\n  if ('onlyChanges' in config && !config.onlyChanges) {\n    assert(scope.cloneOf, 'scope should be created from domain')\n    traverseStores(getGraph(scope.cloneOf), (node, sid) => {\n      if (\n        !(sid in result) &&\n        !includes(ignoredStores, sid) &&\n        !getMeta(node, 'isCombine') &&\n        getMeta(node, 'serialize') !== 'ignore'\n      )\n        result[sid] = scope.getState(node as any)\n    })\n  }\n  return result\n}\n", "import {clearNode} from './clearNode'\nimport {createNode} from './createNode'\nimport type {Node, Subscription, Unit} from './index.h'\nimport {step} from './step'\nimport {Scope} from './unit.h'\n\nexport function createWatch<T>({\n  unit,\n  fn,\n  scope,\n}: {\n  unit: Unit<T>\n  fn: (value: T) => any\n  scope?: Scope\n}): Subscription {\n  const seq = [step.run({fn: value => fn(value)})]\n  if (scope) {\n    const node = createNode({node: seq})\n    const id = (unit as any).graphite.id\n    const scopeLinks: {[_: string]: Node[]} = (scope as any).additionalLinks\n    const links = scopeLinks[id] || []\n    scopeLinks[id] = links\n    links.push(node)\n    return createSubscription(() => {\n      const idx = links.indexOf(node)\n      if (idx !== -1) links.splice(idx, 1)\n      clearNode(node)\n    })\n  } else {\n    const node = createNode({\n      node: seq,\n      parent: [unit],\n      family: {owners: unit},\n    })\n    return createSubscription(() => {\n      clearNode(node)\n    })\n  }\n}\n\nfunction createSubscription(callback: () => void): Subscription {\n  const subscription: Subscription = () => callback()\n  subscription.unsubscribe = () => callback()\n\n  return subscription\n}\n", "export const observableSymbol =\n  (typeof Symbol !== 'undefined' && Symbol.observable) || '@@observable'\n", "import type {Node, StateRef, NodeUnit} from './index.h'\nimport type {Scope, Store, CommonUnit, Domain} from './unit.h'\n\nexport const getGraph = (graph: NodeUnit): Node =>\n  (graph as {graphite: Node}).graphite || graph\nexport const getOwners = (node: Node) => node.family.owners\nexport const getLinks = (node: Node) => node.family.links\nexport const getStoreState = (store: Store<any>): StateRef => store.stateRef\nexport const getValue = (stack: any) => stack.value\nexport const getSubscribers = (store: Store<any>) => store.subscribers\nexport const getParent = (unit: any) => unit.parent\nexport const getForkPage = (val: any): Scope | void => val.scope\nexport const getMeta = (unit: NodeUnit, field: string) =>\n  getGraph(unit).meta[field]\nexport const setMeta = (unit: NodeUnit, field: string, value: unknown) =>\n  (getGraph(unit).meta[field] = value)\nexport const getCompositeName = (unit: CommonUnit | Domain) =>\n  unit.compositeName\n", "import type {Kind, Unit} from './index.h'\nimport type {Domain, Effect, Event, Scope, Store} from './unit.h'\nimport {DOMAIN, STORE, EVENT, EFFECT, SCOPE} from './tag'\nimport {isObject, isFunction} from './is'\nimport {getMeta} from './getter'\n\nexport const unit = (obj: unknown): obj is Unit<any> =>\n  (isFunction(obj) || isObject(obj)) && 'kind' in obj\n\nconst is = (type: Kind) => (obj: unknown) => unit(obj) && obj.kind === type\n\nexport const store = is(STORE) as (value: unknown) => value is Store<unknown>\nexport const event = is(EVENT) as (value: unknown) => value is Event<unknown>\nexport const effect = is(EFFECT) as (\n  value: unknown,\n) => value is Effect<unknown, unknown, unknown>\nexport const domain = is(DOMAIN) as (value: unknown) => value is Domain\nexport const scope = is(SCOPE) as (value: unknown) => value is Scope\nexport const attached = (unit: unknown) =>\n  effect(unit) && getMeta(unit, 'attached') === true\n", "const idCount = () => {\n  let id = 0\n  return () => `${++id}`\n}\n\nexport const nextUnitID = idCount()\nexport const nextStepID = idCount()\nexport const nextNodeID = idCount()\nexport const nextEffectID = idCount()\n", "import type {NodeUnit} from './index.h'\nimport {getGraph, getOwners, getLinks} from './getter'\nimport {DOMAIN, CROSSLINK} from './tag'\nimport {add, forEach} from './collection'\n\nexport const own = (ownerUnit: NodeUnit, links: NodeUnit[]) => {\n  const owner = getGraph(ownerUnit)\n  forEach(links, _link => {\n    const link = getGraph(_link)\n    if (owner.family.type !== DOMAIN) link.family.type = CROSSLINK\n    add(getOwners(link), owner)\n    add(getLinks(owner), link)\n  })\n}\n", "export * as is from './validate'\nimport {forEach} from './collection'\nimport {assert, deprecate} from './throw'\nimport {arrifyNodes} from './createNode'\nimport type {NodeUnit} from './index.h'\nimport type {DataCarrier} from './unit.h'\nimport {getMeta} from './getter'\n\nexport const isObject = (value: unknown): value is Record<any, any> =>\n  typeof value === 'object' && value !== null\nexport const isFunction = (value: unknown): value is Function =>\n  typeof value === 'function'\n\nexport const isVoid = (value: unknown): value is void => value === undefined\n\nexport const assertObject = (value: unknown) =>\n  assert(\n    isObject(value) || isFunction(value),\n    'expect first argument be an object',\n  ) // or function\n\nconst assertNodeSetItem = (\n  value: unknown,\n  method: string,\n  valueName: string,\n  reason: string,\n): asserts value is DataCarrier =>\n  assert(\n    !(\n      (!isObject(value) && !isFunction(value)) ||\n      (!('family' in value) && !('graphite' in value))\n    ),\n    `${method}: expect ${valueName} to be a unit (store, event or effect)${reason}`,\n  )\n\nexport const assertNodeSet = (\n  value: unknown,\n  method: string,\n  valueName: string,\n) => {\n  if (Array.isArray(value)) {\n    forEach(value, (item, i) =>\n      assertNodeSetItem(item, method, `${i} item of ${valueName}`, ''),\n    )\n  } else {\n    //@ts-expect-error some ts assertion edge case\n    assertNodeSetItem(value, method, valueName, ' or array of units')\n  }\n}\n\nexport const assertTarget = (\n  method: string,\n  target: NodeUnit | NodeUnit[],\n  targetField: string = 'target',\n) =>\n  forEach(arrifyNodes(target), item =>\n    deprecate(\n      !getMeta(item, 'derived'),\n      `${method}: derived unit in \"${targetField}\"`,\n      `createEvent/createStore`,\n    ),\n  )\n", "import type {Stack} from './index.h'\n\nexport const callStackAReg = (\n  stack: any,\n  {fn}: {[key: string]: any},\n  {a}: Stack,\n) => fn(stack, a)\nexport const callARegStack = (\n  stack: any,\n  {fn}: {[key: string]: any},\n  {a}: Stack,\n) => fn(a, stack)\nexport const callStack = (stack: any, {fn}: {[key: string]: any}, _: Stack) =>\n  fn(stack)\n", "import type {\n  StateRef,\n  Compute,\n  MovValueToRegister,\n  MovValueToStore,\n  MovStoreToRegister,\n  MovStoreToStore,\n  MovRegisterToStore,\n  Stack,\n} from './index.h'\nimport {nextStepID} from './id'\nimport {EFFECT, REG_A, SAMPLER, STACK, STORE} from './tag'\nimport type {BarrierPriorityTag} from './kernel'\nimport {callStack} from './caller'\n\nconst cmd = <Type extends 'compute' | 'mov'>(\n  type: Type,\n  data: any,\n  priority?: BarrierPriorityTag | false,\n  batch?: boolean,\n) => {\n  const result: {\n    id: string\n    type: Type\n    data: any\n    order?: {\n      priority: BarrierPriorityTag\n      barrierID?: number\n    }\n  } = {\n    id: nextStepID(),\n    type,\n    data,\n  }\n  if (priority) {\n    result.order = {priority}\n    if (batch) result.order.barrierID = ++nextBarrierID\n  }\n  return result\n}\n\nlet nextBarrierID = 0\n\nexport const mov: {\n  <T>(data: {\n    from: 'value'\n    store: T\n    target: StateRef\n    batch?: boolean\n    priority?: BarrierPriorityTag\n  }): MovValueToStore<T>\n  <T>(data: {\n    from: 'value'\n    to: 'stack' | 'a' | 'b'\n    store: T\n    batch?: boolean\n    priority?: BarrierPriorityTag\n  }): MovValueToRegister<T>\n  (data: {\n    from: 'a' | 'b' | 'stack'\n    target: StateRef\n    batch?: boolean\n    priority?: BarrierPriorityTag\n  }): MovRegisterToStore\n  (data: {\n    from: 'a' | 'b' | 'stack'\n    to: 'a' | 'b' | 'stack'\n    batch?: boolean\n    priority?: BarrierPriorityTag\n  }): MovRegisterToStore\n  (data: {\n    store: StateRef\n    target: StateRef\n    batch?: boolean\n    priority?: BarrierPriorityTag\n  }): MovStoreToStore\n  (data: {\n    store: StateRef\n    to: 'stack' | 'a' | 'b'\n    batch?: boolean\n    priority?: BarrierPriorityTag | false\n  }): MovStoreToRegister\n  (data: {\n    store: StateRef\n    batch?: boolean\n    priority?: BarrierPriorityTag | false\n  }): MovStoreToRegister\n  // (data: {\n  //   from?: 'value' | 'store' | 'stack' | 'a' | 'b'\n  //   to?: 'stack' | 'a' | 'b' | 'store'\n  //   store?: StateRef\n  //   target?: StateRef\n  // }): Mov\n} = ({\n  from = STORE,\n  store,\n  target,\n  to = target ? STORE : STACK,\n  batch,\n  priority,\n}: {\n  from?: 'value' | 'store' | 'stack' | 'a' | 'b'\n  to?: 'stack' | 'a' | 'b' | 'store'\n  store?: StateRef\n  target?: StateRef\n  batch?: boolean\n  priority?: BarrierPriorityTag | false\n}) => cmd('mov', {from, store, to, target}, priority, batch)\n\nexport const compute = <\n  LocalValues extends {[key: string]: any} = {[key: string]: any},\n>({\n  fn,\n  batch,\n  priority,\n  safe = false,\n  filter = false,\n  pure = false,\n}: {\n  fn?: (data: any, scope: LocalValues, stack: Stack) => any\n  batch?: boolean\n  priority?: BarrierPriorityTag | false\n  safe?: boolean\n  filter?: boolean\n  pure?: boolean\n}): Compute => cmd('compute', {fn, safe, filter, pure}, priority, batch)\n\nexport const filter = ({\n  fn,\n  pure,\n}: {\n  fn(data: any, scope: {[key: string]: any}, stack: Stack): any\n  pure?: boolean\n}) => compute({fn, filter: true, pure})\n\nexport const run = ({\n  fn,\n}: {\n  fn(data: any, scope: {[key: string]: any}, stack: Stack): any\n}) => compute({fn, priority: EFFECT})\n\nexport const calc = <\n  LocalValues extends {[key: string]: any} = {[key: string]: any},\n>(\n  fn: (data: any, scope: LocalValues, stack: Stack) => any,\n  filter?: boolean,\n  isEffect?: boolean,\n) => compute({fn, safe: true, filter, priority: isEffect && EFFECT})\n\n/**\n * `read(ref, true, true)`: **reg.stack** with **sampler** batch\n *\n * `read(ref, true, false)`: **reg.stack** without batch\n *\n * `read(ref, false, true)`: **reg.a** with **sampler** batch\n *\n * `read(ref, false, false)`: **reg.a** without batch\n *\n */\nexport const read = (\n  store: StateRef,\n  toStack?: boolean,\n  samplerPriority?: boolean,\n) =>\n  mov({\n    store,\n    to: toStack ? STACK : REG_A,\n    priority: samplerPriority && SAMPLER,\n    batch: true,\n  })\n\nexport const userFnCall = (\n  fn: (data: any, scope: {[key: string]: any}, stack: Stack) => any = callStack,\n  isFilter?: boolean,\n) => compute({fn, pure: true, filter: isFilter})\n\nexport const step = {mov, compute, filter, run}\n", "import type {StateRef, StateRefOp} from './index.h'\nimport {nextStepID} from './id'\nimport {add} from './collection'\n\nexport const createStateRef = (current?: any): StateRef => ({\n  id: nextStepID(),\n  current,\n})\nexport const readRef = ({current}: StateRef | {current: any}) => current\n\nexport const addRefOp = (ref: StateRef, op: StateRefOp) => {\n  if (!ref.before) ref.before = []\n  add(ref.before!, op as any)\n}\n", "import {Node, NodeUnit} from './index.h'\nimport {getGraph, getOwners, getLinks, getSubscribers, getMeta} from './getter'\nimport {is} from './is'\nimport {removeItem} from './collection'\nimport {CROSSLINK} from './tag'\n\nconst removeFromNode = (currentNode: Node, targetNode: Node) => {\n  removeItem(currentNode.next, targetNode)\n  removeItem(getOwners(currentNode), targetNode)\n  removeItem(getLinks(currentNode), targetNode)\n}\nconst clearNodeNormalized = (\n  targetNode: Node,\n  deep: boolean,\n  isDomainUnit: boolean,\n) => {\n  targetNode.next.length = 0\n  targetNode.seq.length = 0\n  //@ts-expect-error\n  targetNode.scope = null\n  let currentNode\n  let list = getLinks(targetNode)\n  while ((currentNode = list.pop())) {\n    removeFromNode(currentNode, targetNode)\n    if (\n      deep ||\n      (isDomainUnit && getMeta(targetNode, 'op') !== 'sample') ||\n      currentNode.family.type === CROSSLINK\n    ) {\n      clearNodeNormalized(\n        currentNode,\n        deep,\n        getMeta(currentNode, 'op') !== 'on' && isDomainUnit,\n      )\n    }\n  }\n  list = getOwners(targetNode)\n  while ((currentNode = list.pop())) {\n    removeFromNode(currentNode, targetNode)\n    if (isDomainUnit && currentNode.family.type === CROSSLINK) {\n      clearNodeNormalized(\n        currentNode,\n        deep,\n        getMeta(currentNode, 'op') !== 'on' && isDomainUnit,\n      )\n    }\n  }\n}\nconst clearMap = (map: Map<any, any> | Set<any>) => map.clear()\nexport const clearNode = (\n  graphite: NodeUnit,\n  {\n    deep,\n  }: {\n    deep?: boolean\n  } = {},\n) => {\n  let isDomainUnit = false\n  //@ts-expect-error\n  if (graphite.ownerSet) graphite.ownerSet.delete(graphite)\n  if (is.store(graphite)) {\n    clearMap(getSubscribers(graphite))\n  } else if (is.domain(graphite)) {\n    isDomainUnit = true\n    const history = graphite.history\n    clearMap(history.events)\n    clearMap(history.effects)\n    clearMap(history.stores)\n    clearMap(history.domains)\n  }\n  clearNodeNormalized(getGraph(graphite), !!deep, isDomainUnit)\n}\n", "import type {Subscription, NodeUnit} from './index.h'\nimport {clearNode} from './clearNode'\n\nexport const createSubscription = (node: NodeUnit): Subscription => {\n  const result = () => clearNode(node)\n  result.unsubscribe = result\n  return result\n}\n", "import {processArgsToConfig} from './config'\nimport {createNode} from './createNode'\nimport type {Subscription, NodeUnit, Cmd} from './index.h'\nimport {createSubscription} from './subscription'\nimport {assertNodeSet, assertTarget} from './is'\n\nexport const createLinkNode = (\n  parent: NodeUnit | NodeUnit[],\n  child: NodeUnit | NodeUnit[],\n  node?: Array<Cmd | false | void | null>,\n  op?: string,\n  scopeFn?: Function,\n) =>\n  createNode({\n    node,\n    parent,\n    child,\n    scope: {fn: scopeFn},\n    meta: {op},\n    family: {owners: [parent, child], links: child},\n    regional: true,\n  })\nexport const forward = (opts: {\n  from: NodeUnit | NodeUnit[]\n  to: NodeUnit | NodeUnit[]\n  meta?: Record<string, any>\n}): Subscription => {\n  const method = 'forward'\n  const [{from, to}, config] = processArgsToConfig(opts, true)\n  assertNodeSet(from, method, '\"from\"')\n  assertNodeSet(to, method, '\"to\"')\n  assertTarget(method, to, 'to')\n  return createSubscription(\n    createNode({\n      parent: from,\n      child: to,\n      meta: {op: method, config},\n      family: {},\n      regional: true,\n    }),\n  )\n}\n", "import {run} from './step'\nimport {callStack} from './caller'\nimport {createNode} from './createNode'\nimport {Subscription, NodeUnit} from './index.h'\nimport {createSubscription} from './subscription'\nimport {assert} from './throw'\nimport {isFunction} from './is'\n\nexport const watchUnit = (\n  unit: NodeUnit,\n  handler: (payload: any) => any,\n): Subscription => {\n  assert(isFunction(handler), '.watch argument should be a function')\n  return createSubscription(\n    createNode({\n      scope: {fn: handler},\n      node: [run({fn: callStack})],\n      parent: unit,\n      meta: {op: 'watch'},\n      family: {owners: unit},\n      regional: true,\n    }),\n  )\n}\n"],
  "mappings": "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",
  "names": ["forIn", "obj", "cb", "key", "forEach", "list", "fn", "assert", "condition", "message", "Error", "withRegion", "unit", "regionStack", "parent", "value", "template", "getMeta", "readTemplate", "sidRoot", "getParent", "createNode", "node", "from", "source", "to", "target", "child", "scope", "meta", "family", "familyRaw", "type", "regional", "sources", "arrifyNodes", "links", "owners", "seq", "item", "add", "result", "id", "nextNodeID", "next", "link", "getOwners", "owner", "getLinks", "own", "getValue", "launch", "payload", "upsert", "pageForLaunch", "currentPage", "stackForLaunch", "forkPageForLaunch", "forkPage", "params", "defer", "page", "getForkPage", "Array", "isArray", "i", "length", "pushFirstHeapItem", "getGraph", "isRoot", "stop", "skip", "reg", "lastStartedState", "isWatch", "isPure", "kernelLoop", "deleteMin", "idx", "stack", "hasPageReg", "hasScopeReg", "local", "fail", "stepn", "step", "order", "priority", "barrierID", "fullID", "barriers", "has", "pushHeap", "delete", "data", "STACK", "store", "pageForRef", "getPageForRef", "initRefInScope", "softRead", "undefined", "readRef", "getPageRef", "current", "pure", "computationResult", "safe", "tryRun", "filter", "finalValue", "nextNode", "fxCount", "storeChange", "warnSerializeNode", "additionalLinks", "unitObjectName", "objOrArr", "method", "name", "comma", "is", "getCompositeName", "fullName", "toString", "setStoreName", "rawName", "shortName", "Object", "assign", "createName", "path", "composite", "concat", "processArgsToConfig", "args", "singleArgument", "rawConfig", "assertObject", "metadata", "or", "childConfig", "and", "unwrappedNestedValue", "isObject", "nested", "applyTemplate", "handlers", "createEvent", "nameOrConfig", "maybeConfig", "config", "flattenConfig", "event", "deprecate", "oldPage", "setCurrentPage", "create", "finalEvent", "graphite", "initUnit", "watch", "watchUnit", "map", "deriveEvent", "MAP", "userFnCall", "callStack", "filterMap", "calc", "isVoid", "prepend", "contramapped", "createLinkNode", "applyParentHook", "domain", "hooks", "on", "methodName", "nodeSet", "assertNodeSet", "isFunction", "trigger", "off", "getSubscribers", "set", "createSubscription", "updateStore", "callARegStack", "createStore", "defaultState", "props", "plainState", "createStateRef", "updates", "named", "derived", "plainStateId", "subscribers", "Map", "stateRef", "getState", "reachedPage", "targetRef", "setState", "state", "reset", "units", "currentSubscription", "get", "firstState", "lastResult", "storeState", "innerStore", "linkNode", "callStackAReg", "addRefOp", "getStoreState", "noInit", "eventOrFn", "subscription", "updateFilter", "defaultConfig", "upd", "_", "b", "read", "a", "mov", "serializeMeta", "ignored", "customSerialize", "sid", "setMeta", "serialize", "reinit", "combine", "handler", "stores", "structStoreShape", "shapeReady", "noArraySpread", "rawHandler", "slice", "storeCombination", "createStoreObject", "createDefer", "req", "Promise", "rs", "rj", "catch", "createEffect", "instance", "kind", "use", "runner", "getCurrent", "anyway", "finally", "done", "status", "error", "doneData", "failData", "handlerId", "getType", "scope_", "handler_", "scopeRef", "createScopeRef", "onResolve", "onSettled", "onReject", "ok", "runFn", "then", "op", "fx", "fxID", "nextEffectID", "savedFork", "setForkPage", "inFlight", "x", "pending", "amount", "effect", "attach", "injected", "mapParams", "attached", "runnerSteps", "runnerFnStep", "computedParams", "sourceData", "isEffectHandler", "splice", "parentDomain", "createApi", "setters", "createDomain", "history", "Event", "Effect", "Store", "Domain", "factory", "tag", "lowerCaseTag", "toLowerCase", "onCreateUnit", "Set", "ownerSet", "hook", "fromObservable", "observable", "observableItem", "observableSymbol", "subscribe", "disposer", "complete", "merge", "validateSampleConfig", "atLeastOneFieldExists", "sampleConfigFields", "field", "fieldErrorMessage", "sample", "clock", "batched", "greedy", "createSampling", "guard", "restore", "split", "targets", "METHOD", "match", "configForm", "cases", "matchIsUnit", "matchIsFunction", "matchIsShape", "assertTarget", "__", "splitterSeq", "values", "caseNames", "keys", "compute", "scopeTargets", "String", "launchCase", "includes", "lastValues", "needBarrier", "storeOrFn", "updater", "storeRef", "caseName", "splitterNode", "allSettled", "start", "ctx", "reject", "parentFork", "defers", "launchUnits", "launchParams", "traverseStores", "root", "visit", "normalizeValues", "assertEach", "mapOrRecordValues", "fork", "domainOrConfig", "optionalConfig", "forkInFlightCounter", "batch", "resolve", "storeStack", "storeNode", "sidIdMap", "sidValuesMap", "sidSerializeSettings", "ignore", "write", "warnSerialize", "resultScope", "cloneOf", "activeEffects", "oldScope", "ref", "valuesSidMap", "fromSerialize", "hydrate", "traverseTarget", "needToAssign", "normalizedValues", "valuesSidList", "getOwnPropertyNames", "storeNodes", "storeValues", "serializer", "scopeBind", "savedForkPage", "console", "ignoredStores", "serializeSettings", "noopSerializer", "onlyChanges", "createWatch", "run", "scopeLinks", "push", "indexOf", "clearNode", "callback", "unsubscribe", "Symbol", "graph", "val", "compositeName", "removeItem", "pos", "subject", "suggestion", "idCount", "nextUnitID", "nextStepID", "readSidRoot", "withFactory", "loc", "ownerUnit", "_link", "flat", "assertNodeSetItem", "valueName", "reason", "targetField", "cmd", "nextBarrierID", "isEffect", "toStack", "samplerPriority", "isFilter", "before", "heap", "ret", "v", "getPriority", "r", "l", "queue", "ix", "first", "last", "size", "bucket", "t", "newForkPage", "newPage", "isGetState", "noopParser", "sourceRef", "isKernelCall", "refsMap", "_sourceRef$meta", "isFresh", "err", "part", "removeFromNode", "currentNode", "targetNode", "clearNodeNormalized", "deep", "isDomainUnit", "pop", "clearMap", "clear", "events", "effects", "domains", "scopeFn", "forward", "opts", "hookType", "isDomain", "unitId", "thru", "observer", "nativeTemplate", "mapped", "caller", "reader", "needSpread", "clone", "stateNew", "rawShape", "storeStateRef", "rawShapeReader", "c", "childRef", "defaultShape", "sidechain", "targetMayBeStore", "filterRequired", "isUpward", "sourceIsClock", "filterType", "clockState", "filterNodes", "filterRef", "hasFilter", "syncSourceState", "readAndFilter", "hasSource", "jointNode", "src", "joint", "isSourceStore"]
}
